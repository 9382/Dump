--done using https://github.com/9382/obfuscation/blob/main/Lua/Rewriter.lua - the not... parts didnt format correctly but are useless anyways so im not fixing that bug
return (function(F, ...)
	local o, n = {{}}, (...);
	local M = n[(-0xFB3)];
	local I = n[((#{399}) + 0x15F2)];
	local b = n[0x15DA];
	local U = n[0x158B];
	local P = n[((#{((#{707, 617}) + 0x06B), 641}) + 5426)];
	local W = n[(-((#{}) + ((#{844, 0x23A, 447, 0x2DC}) + 0xF53)))];
	local Q = n[5347];
	local L = n[((#{0x1BA, 421}) + 0x14AE)];
	local O = n[(-((#{}) + 3864))];
	local Un = n[(-3790)];
	local Vn = n[(-((#{0x030, 0x307, 0x3DC, 0x2CC}) + 3729))];
	local Gn = n[(-0xE5C)];
	local Nn = n[((#{[0x0EB] = 786, 0x2F8, 0x238, 0x28D, [855] = 569, 0x39A}) + 5244)];
	local Wn = n[(-((#{0x3A5, 0x1F7, 168, 24}) + 3581))];
	local In = n[(-((#{244, [978] = 71, 0x143, 0x27E}) + 0xDA8))];
	local Hn = n[(-((#{0x22D, 0x155}) + 0xD8B))];
	local B = n[5185];
	local h = n[5178];
	local A = n[0x1433];
	local d = n[(-3441)];
	local u = n[0x140A];
	local Mn = n[5033];
	local c = n[((#{341, 0x2D5, 842, 292}) + 0x1392)];
	local bn = n[(-3352)];
	local sn = n[((#{0x04B}) + 0x1343)];
	local Pn = n[0x12EC];
	local wn = n[(-((#{[0x198] = 0x1E8, [539] = 0x1AB, 0x245, 526, 0x0A0, [0x2FB] = 0x210, 318}) + 0xCEC))];
	local hn = n[((#{819, 522, 0x257}) + 4765)];
	local un = n[(-0xCD8)];
	local fn = n[4702];
	local rn = n[(-3229)];
	local cn = n[(-3132)];
	local An = n[0x121A];
	local Dn = n[((#{968, 292, 0x3C5}) + 0x11C9)];
	local Bn = n[((#{0x2D5, 0x385, 0x2A8, ((#{[0x039] = 0x184, [0x05D] = 0x200, [0x2CC] = 0x0B5, [0x36F] = 693, 0x261}) + 961)}) + 0x11AA)];
	local Cn = n[(-((#{0x2FE}) + 0xBEC))];
	local En = n[4501];
	local Fn = n[((#{299, 0x1BC, 634}) + 0x1144)];
	local kn = n[(-0xB9F)];
	local vn = n[((#{((#{}) + 63), 709, 303}) + 4398)];
	local Ln = n[(-2963)];
	local zn = n[(-((#{}) + 2950))];
	local pn = n[(-2886)];
	local qn = n[((#{[185] = 341, 0x317, [0x373] = 0x2A4, 885, 0x0B3}) + 4386)];
	local yn = n[(-0xB04)];
	local oo = n[(-0xAD7)];
	local eo = n[((#{162, 0x3A5}) + 4332)];
	local to = n[(-0xA8A)];
	local xo = n[(-((#{}) + 0xA82))];
	local lo = n[(-((#{0x0C8, 731, 0x04F}) + 2677))];
	local mn = n[(-2619)];
	local no = n[0x10A8];
	local jn = n[((#{882}) + 4181)];
	local Yn = n[4150];
	local Kn = n[((#{}) + 0x101C)];
	local Tn = n[(-0x9F2)];
	local On = n[(-((#{0x016}) + 0x9C2))];
	local Qn = n[(-0x989)];
	local Zn = n[((#{0x1A9, 0x2FA}) + 4078)];
	local Rn = n[(-0x954)];
	local Sn = n[(-2312)];
	local gn = n[(-0x900)];
	local Xn = n[((#{((#{}) + 955), 979, 681, 0x146}) + 0xFAB)];
	local an = n[(-2256)];
	local Jn = n[(-2216)];
	local Z = n[((#{[0x0E7] = 774, ((#{0x14B}) + 0x0AE)}) + 0xF5E)];
	local xn = n[(-((#{111, 765}) + 0x87C))];
	local p = n[(-2100)];
	local X = n[(-((#{0x181, 0x056, 0x14A, ((#{0x08C, 0x1BC}) + 924)}) + ((#{0x082, 0x2EF}) + 0x820)))];
	local R = n[((#{0x083, 0x03C, 0x2FD, 590}) + 3868)];
	local Y = n[(-((#{[0x224] = 378, ((#{}) + 0x196), [790] = 91, 614, 0x2E5, 0x228}) + 0x7D2))];
	local S = n[((#{620, 0x1EF, 0x192, 0x182}) + 3798)];
	local i = n[(-((#{}) + 1971))];
	local v = n[(-1953)];
	local m = n[(-1859)];
	local j = n[3763];
	local y = n[(-((#{69}) + 0x702))];
	local q = n[(-((#{((#{0x119, [57] = 0x06A, 0x158, [0x206] = 731, 0x3E5}) + 173)}) + 0x6ED))];
	local K = n[(-((#{[346] = 163, 318, 437}) + 1760))];
	local g = n[0xE6C];
	local T = n[((#{0x0E4, 48, 532, 0x254}) + 3623)];
	local G = n[(-((#{218}) + 0x6B2))];
	local s = n[(-1711)];
	local w = n[((#{}) + 0xDE1)];
	local D = n[0xD8E];
	local E = n[(-1697)];
	local N = n[3385];
	local H = n[(-((#{[812] = 0x269, [0x0B5] = 541, 453, 449, 0x110, 59}) + 1633))];
	local V = n[((#{[556] = 0x0A0, 412, 797, 0x1AF}) + 3337)];
	local J = n[(-0x638)];
	local f = n[(-1559)];
	local a = n[0xD08];
	local z = n[3308];
	local nn = n[(-1471)];
	local C = n[((#{((#{0x33C, [465] = 820, 0x06D}) + 915), 0x09D, 0x3B4, [802] = 0x2E9, 235}) + ((#{}) + 0xCAF))];
	local dn = n[((#{}) + 3157)];
	local x = n[0xC4D];
	local tn = n[((#{366, ((#{}) + 5), 0x2A2, 0x3B7}) + 0xC3D)];
	local l = n[0xBE4];
	local on = n[((#{}) + 0xBCC)];
	local en = n[2993];
	local ln = n[(-0x5B9)];
	local e = n[(-0x58C)];
	local t = n[((#{503, 736, 0x33B}) + 0xB88)];
	if (not true) then
		local function n(...)
			if (((((((((-...)._ * (-...)._) <= (-(#(not ...)))) > ((-(#{(#(not ...))(), (#n)()}))() % (-{(-(#(not ...))), (-...)(), [((-(#...))._())] = (-...)._}))) < (-(#(((not (-(not ...))._()) and (#(not ...))) or ((#...) >= (...)()))))._()) > (not ...)()) and (-...)._) and (... < ((#(not ...))._() / (-...)()))) and (-(#(not ...)))._()) then
				while ((((((#{(-(not n))()})() * (not {(-(#(not ...)))._(), (#n)._()})._()) + (((-(#(not ...)))() * (#(not ...))._()) % (not ...))) < ((-(#n))._ / (-(not ...))._)) < (not ...)._()) or ((#(not n))._() - (-(not ...))._())) do
					for n = (((((-function(n, n, n, n, n, n, ...)
						return (#(not ...)), (-(#(not ...)))._(), (not ...)._, (-(not ...))._(), ..., (-(#(not ...)))._, (-(#...))();
					end) > ({} / (-(#...))._())) >= (#(not ...))()) == (not ...)._) or (((-(not ...))._ < (#(not ...))._) <= (-(#...))._())), ((((((...)._ ^ (-(#(not ...)))._) - (#...)._) > (...)._()) == ((not ...)._() % (#(not ...))._)) and ((#...)._ >= (-...)())), ((((...)._ < (-(#...))._) < (-(#...))._) or (((-...) % (-(not ...))._) and (((-(#...)) >= (not ...)) < (-(#(not ...)))))) do
					end;
					if ((-...)._ <= (((((-(#...))._ * (not ...)._) % (-(#(not ...)))()) % (-(not ...))) - (((...)._ * (-(#n))()) * (-(not ...))._))) then
					end;
					for n = ((((#...) <= ((-{(#...), (#...)._, (not ...)._})._ + (-(#(not ...)))._)) >= ((not ...) + ((not ...)() / (#...)()))) or ((-(#...))() == (...)._())), ((((...)() <= ((-(#function(n, ...)
						return (-(not ...))(), (-(not ...)), (not n)._(), (not ...)._, (-(#...));
					end))._() % (-(not ...))._())) and ((((#(not ...)) <= (not ...)()) == (#(not ...))._()) <= (not ...)._())) or (not ...)._()), ((((not ...)() / (...)()) < (#...)._) and ((-(not ...)) == ((-(#...))() - ((-...)() / ((-(#...)) ^ ...))))) do
					end;
					if ((((-...)() - ((not ...)._ ^ (not ...)._())) and ((((-(#(not ...)))._() * (-...)) == (-(not ...))()) == (...)())) or (-(#(not ...)))) then
					end;
					while (((((((not ...)._() >= (#(not ...))._()) >= (-...)._()) < ((-...)._() / (-(#...))._)) <= (...)()) > (...)._) < ...) do
					end;
					if ((((((...)._ % (...)()) % (-...)._) * (-...)()) % ((-(#(not ...)))._ ^ ((#n)._() ^ (...)._()))) >= (-(not ...))()) then
					end;
					for n = ((((-(#{})) * ...) <= n._) or ((((-(#...))._ % ((-(#(not ...))) ^ (...)._())) - (#(not n))) > (#...)._)), (((((#(not ...))._ - (#(not function(o, o, o, o, n, ...)
						return (-...)._, (-(#...)), (#(not n))(), (#(not ...))._(), (-(#...))._(), (-...)(), (-(not ...))(), (-...), (...)._();
					end))._()) == (-(#n))()) or ((#...)._() > (-(#(not ...))))) or ((-...)._() >= ((not ...)._ * (#...)()))), (((((-(not {(-...)}))._() < (#(not ...))._()) < (...)._()) < (-(#(not ...)))()) > (((not ...) - ...) - ((-(#n))() * (#...)()))) do
					end;
					for n = (((((#...)._ % (-n)._()) / ((-...)._() ^ n._)) % (-(#(not ...)))) or (((not ...)._ < (-(#...))._()) and (#(not ...))._)), (((((-(#(not ...)))._ >= (-(not {(#(not ...))._()}))._) <= ((-(not ...)) - (-...)._)) == ((-...)._ / (-(not ...)))) or ((-(#(not ...)))() - ...)), ((((#...)._() > ((not ...) + ((((-(#...))._ / (-...)._()) * (-(not ...))) / (-(not ...))))) < (not ...)._) == (#(not ...))()) do
					end;
				end;
				if (((((-(not ...))._() + (-(not ...))()) == (#(not function(n, n, n, n, ...)
					return;
				end))()) < ((#(not ...))._() + (-(not ...))._)) or (((-...) * ((#(not ...))._() ^ (-(#(not ...))))) <= ((-(#(not ...))) * (#(not ...))._))) then
					for n = ((... - ((((-(#...))() * (not ...)._) / (not ...)) % (-(not ...)))) and (((not ...)() + (#(not ...))()) <= (...)._)), ((-(not function(o, o, o, o, o, o, o, o, n, ...)
						return (-(#(not ...)))(), (not ...)._, (...)._, (-(#n))();
					end)) or (((((-(not ...))._() % ((#...)() ^ (-...)._)) - (-(not ...))._()) + (not n)()) == ((-...) ^ (-(not ...))))), (((((#function(...)
						return (-(#n))(), (-(#...))._(), (-(#...))._, (#...)(), (not ...)._(), (-(#...))(), (-(#(not ...)))._, (-(#...))();
					end)._() >= (not ...)) >= ((-(#(not ...)))() * (...)._)) < (#(not ...))._()) or ((not ...) >= ((not ...)._() % (-(#(not ...)))._))) do
					end;
					if ((#...)._ and ((((((#{})() ^ (-(not ...))._()) == (-(#...))._()) == (-...)._) < ((not ...)._() ^ (#...)._())) >= (...)())) then
					end;
					if ((((((((-(#(not ...))) and ((-...)._() ^ (-(#(not ...))))) and (-(not ...))())._ > (not ...)()) <= ((#...)._() * (-(#(not ...)))._())) <= (-(not ...))._) >= ((-(#...))._() ^ (...)())) == (-...)._) then
					end;
					while ((#(not ...))() or ((((-...)() * (-(not ...))._) <= (...)._()) and ((((-...)._() ^ (-(#(not ...)))) / (#n)()) <= (not n)._()))) do
					end;
					for n = ((((not ...)._() >= ((-(#(not ...)))._() + (-...)._)) <= ((... ^ (not ...)) * (-(#...))._())) >= ((...)() * (-(#(not ...))))), (((#(not ...))._ > ((#...) - ((-(#...))._() * ((-(#...))() ^ (-(#(not ...))))))) >= (((not ...)._() ^ (#(not ...))._) % (-...))), ((((not n)._ / (-(#(not ...)))._) < (not ...)()) or (((-(#n))._() <= ((-(not ...))._() / (#...)._)) >= ((#(not ...))._() % (#(not n))))) do
					end;
					for n = ((((((-(#(not ...))) + (-function(o, o, o, o, o, o, o, n, ...)
						return (-(#(not ...)))(), (not n)._, (#...)._, (-(#(not ...)))(), (#...)();
					end)._) == ((#...)._ * (#(not ...))._())) == (-(#...))._()) > ((not ...)._() / (...)._())) < ...), (((((not ...)._ - (-(#(not {(#(not ...))()})))()) >= ((-(#...))._() - (-(#...))._)) < (#(not n))) and ((-(#(not ...)))._ >= ((#...)() ^ (-(#...))))), ((((((-(not ...))() or (-(not ...))._()) or ((-(#...))._ - (-(#(not n)))._()))._ or (-(#(not ...)))._()) or (((((#...)() / (-...)()) * (#(not ...))._) + ...) - (-(#...)))) or (#...)()) do
					end;
					local n = (not n);
					local n = (((((not (-(#...))) < ((-(#...))._() - (#(not ...))())) == (not ...)._) >= (#...)._) and ...);
				end;
				if ((((((((-(-n)._()) <= (-(#...))()) >= (-(#(not ...)))) or (((-(not ...))() ^ ...) == (-(#...))()))() - (-(#...))()) >= (((-(not ...))() ^ (...)()) * (not ...)._())) > (...)()) and (((#(not ...)) > (not ...)) == ((-(#...))._() - (-(#(not ...)))()))) then
					for n = ((#(not {(not n)._(), (-(#(not ...)))._(), (-...)._})) or (((((-(#{[((not ...)())] = (#(not ...))._()}))._() == (#(not ...))) >= ((#...)() ^ (#(not ...))._())) == (#...)) < ((-(#n))._ ^ (-(not ...))._))), (((((-(#(not ...)))() ^ (-(#(not ...)))._()) / (-(#(not ...)))._) / (#...)._) or (((-(#...)) - ((not ...)._() / (...)())) >= (-(#...))._)), (((((-{[(-(#(not ...)))._] = (-(not ...))(), (-...)._})._ >= (-(#{(#...)(), (...)._, [(not ...)] = (#...), [(-...)._] = (-(#(not ...)))}))) == ...) == ((-...)() + (((-...)._ * (not ...)._()) * (-(#(not ...)))._))) < (not ...)) do
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					while ((((function(n, n, n, n, ...)
						return (not ...)._(), (not ...)._, (-...)._(), (...)._, (-(#...))._(), (-...), (#...);
					end - ((-...)._ % (-(#...))._())) <= (not ...)()) == (((#...)._() + (...)._) + (#...)._)) >= ...) do
					end;
					local function n(...)
					end;
					local n = (-(#(not function(o, o, o, o, o, o, o, n, ...)
						return (#...)(), (not ...), (-(#(not ...)))._, (-...)(), (-...)._, ..., (-(#(not n)))._, (-(not ...)), (#n)._();
					end)))._();
					if ((((-(not ...))._ / (#...)._) + ((-...) / (#...)._)) and ((((-...) % (-(not ...))._) % (not ...)._) / (-(#(not ...)))._())) then
					end;
					if ((((-(#(not ...)))._() - (-...)._()) >= (((#(not ...))() / (...)._) + ((-...)._() ^ (not ...)._))) or ((not ...) % (-(not ...))._())) then
					end;
				end;
				for n = ((((((...)._() == ((-(#function(n, n, n, n, n, n, n, n, n, ...)
					return (-...), (-(#(not ...)))(), (...)._();
				end)) ^ (#(((not ((not ...)._ ^ (-(#...)))) * (-(not ...))()) % (#...)()))._())) > (-...)()) >= (...)()) >= ((#((not ...) ^ (-(not ...)))) % (#(not ...)))) and ((not ...) ^ (not ...)())), ((-...)._ or ((((((-...) % (((((-(-(not ...))) < (-(#...))()) >= (-(not ...))._) and (#...))._ ^ (-(#(not function(o, o, o, o, o, o, o, o, n, ...)
					return (-(not ...))._(), (not n)();
				end)))())) % ((not ...) ^ (#(not n))())) % (...)._) >= (-...)) <= ((#...) + (-...)._()))), (((((-(#...))() % (-(#(not ...)))._) % (-{[(-(#(not ...)))] = (-...), (not ...)._})._()) or ((-...)() ^ (-(#(not ...)))._)) or ((#...) <= (((-(not ...))._ - ...) - ((-(#(not ...)))() ^ (-(not ...))())))) do
					local n = (((not ...)._() or (((...)._() and (not ...)()) and ((-(#...)) + (-...)._()))) or (not ...)._);
					local function n(...)
					end;
					while ((((-(#n))._ <= ((((#(not ...))._() - (#n)()) and ((#(not ...))() % (-(#n))._))._ ^ (...)._)) == (-(not ...))) and ((((-(#...))._ / (-(#...))) <= (#(not ...))._) > (not ...)._())) do
					end;
					if ((((-(#...))._() > (n._() - ((-(#(not ...))) * (-(not ...))._))) > (-(#...))._()) <= (((not ...)() + n._()) + (not ...)._)) then
					end;
					if ((((((#...)._() == (not ...)._()) == (((-(#(not ...)))._ / (-(#(not ...)))()) % (...)())) <= (-(#...))._()) <= (-...)()) > (-(#...))()) then
					end;
					while (((((... - (-(#(not ...)))._) - (not ...)()) < (-(not n))._) < ((-(not ...))._ / (n ^ (#(not ...))()))) == (-(#(not ...)))) do
					end;
					for n = (((-(#...))._ / (#(((not (not ...)()) == ((-(#...)) % (-(not ...))())) >= (-(not ...))))) or ((((#...)() / (#...)._) / ((-(#...))._() ^ (-...)._)) + ((-n) % (-(#(not n)))))), ((((((-...)() * (not ...)()) == (not ...)) <= (((#(not ...)) * (-(not ...))) / (-...)._)) >= (-(#(not ...)))) >= (not n)._), ((((-(#...))._() > (((not n)._() % (#...)._()) % (-...)._())) > ((not ...)() + (#(not ...)))) and ((-(not n))._() <= (#(not ...)))) do
					end;
					while ((((-(#(not ...))) < (-(not {(not ...)._()}))._) > ((... ^ (...)._) + (-(#...)))) or ((-(not ...))() and ((not ...)() - (-n)))) do
					end;
				end;
				if (((-((((not (#...)._) - (-...)._()) > ((-(#...)) * (#(not ...)))) > ((-(#...))() + (-(#(not ...)))._()))) <= (-...)._()) and ((((((-(#{[(...)] = (-(not ...))(), [((-(#(not ...)))._())] = (-(not ...))._, [(...)] = (-(not ...))()})) == (-...)._) == (#...)()) < (-(#(not ...)))._()) >= ((-...)._ - (-(not ...))._())) == ((-(#...))._() + (-(#(not ...)))._))) then
					local n = (#(not {(not ...), (...)._()}));
					local n = (#(not ...))._;
					for n = ((((...)._ or ((({[((...)._())] = (-(#(not ...)))._, (-(#...)), [(-(#...))] = (#(not ...))._} - (not ...)) + (-(#(not n)))) and (-...)())) or ((-(#(not ...)))._ / (not ...))) or (not ...)), (((((-(#(not ...))) ^ (-(#...))) == (#(not ...))) and ((((-(not ...))._ < (-...)._) > (-(#...))) == (#...)._)) or (-(#...))()), (((...)() and (#{(-(#(not ...)))._, (-(#...)), [((#...)())] = (-(#...))._()})._()) and ((-...) < (((... / ...) / (-(#(not ...)))) - ((-(not ...))._ % (not n)())))) do
					end;
					if ((((((#(not n)) + (-...)()) - (#...)._()) == (...)._) < (-(#...))._) and ((-(#(not ...)))() > (#((not ...) ^ (not ...)())))) then
					end;
					for n = (((((... % (-(#...))._()) == (-...)) <= (#...)._) <= ((-(#...))._ / (not ...)._())) < (... - (not ...))), ((((-...)() * (#(not ...))._()) <= ((not ...)._ % (-(#(not ...))))) or ((((...)._ / (-(#...))) <= (-(#(not ...)))()) >= (-(not ...))())), ((((#...) * (#...)._()) < (((-...)._ ^ (-(#...))._()) - ((...)._ ^ ((not ...)._() ^ (not ...)._)))) and (#...)) do
					end;
					local n = (not ...)._();
					if ((((-(#(not ...)))._() == ((((not (#(not ...))._) >= ((...)() / (-(not ...))._())) >= ...)._() ^ (not ...)._)) == (#(not ...))()) or ((((#...)._ + (#(not ...))()) >= (not ...)) == (-(#...))._)) then
					end;
					if ((((((-(#(not n)))._() % (-(#(((not (#...)._()) * (-(#...))._()) or ((#(not ...)) and (-(#(not ...)))()))))) < (#(not ...))._()) >= ((-(not ...)) + (#(not ...))())) < (-(#(not ...)))._()) and ((#(not ...))._() + (-(#(not ...)))._())) then
					end;
				end;
				local function n(...)
					for n = (((((#...)() - (-(#...))._()) == ((...)._ % (-(#...))._)) <= ((#(not ...))._ + ((-(not ...))._ * (-...)._))) < (not ...)._()), (((((((not ...) ^ (...)._) < (-(#(not ...)))) > ((...)._() + (-(#...))._())) <= (-(#(not ...)))._) >= (not ...)._()) < (#...)), ((-(not n))._ or ((#...)._ and (((((-(#(not ...)))() / (-(#...))) / (-(#(not ...)))()) - (...)._) > ((not ...)() * (#(not ...)))))) do
					end;
					while (((((-(#(not ...)))._() > ((#(not ...))() * (#n)())) < (-(#...))) >= (((-...) + (-(#(not ...)))()) + (#(not ...)))) >= (-(#(not n)))._) do
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					for n = ((((((-...)._() <= (#((((not (#(not ...))) * (#(not ...))) >= (-(#...))._()) and (-n)))()) >= ((...)() % (#...)._)) == (not ...)._) == (not ...)._()) >= ((-(#(not ...)))() + (#(not ...))._)), (((((-(#(not ...)))._() / (not function(n, n, n, n, ...)
						return (-(not ...))(), (-(#...))._(), (#...)._(), (-(#(not ...))), (#...)._, (not ...)(), (-...), (-(#(not ...)));
					end)) / (-...)._()) or ((-...)._() <= (...)._)) or (((-(not ...))() * (#...)._()) and (#...)())), ((((((-(#n))._() / (-(not function(n, n, n, ...)
						return (-(#(not ...)))(), (-(#...))._(), (...)._(), (-(not ...));
					end))._()) + (-...)._) + ((not ...)._ ^ (-(#(not ...)))())) > ((#...)._() * (not ...)._)) or (#(not ...))._) do
					end;
					if (((((#(not ...))() - n._()) - n._) <= ((-(not n)) - ((-(#(not ...)))._ ^ (#...)))) and ((-(not ...))() / (-n)._)) then
					end;
					local function n(...)
					end;
				end;
				local n = (not ...)();
				local function n(...)
					while (((((#...)._() ^ (#...)._()) < ((#(not ...))._ + (-...)._())) and (-(not n))._) or (n._() >= ((not n)() - (#...)()))) do
					end;
					while (((((#(not n)) / (not {[(#(not ...))._] = (#(not ...))._, [((#(not n))())] = (-(#...))})._()) - (not n)._()) >= (-(not n))._) <= ((((-...)._ * (-(not ...))) % (-n)) - (#(not n)))) do
					end;
					for n = ((((#n)() + (-(#...))) <= ((#(not ...))._ % (-(#(not ...)))._)) or (((-(not ...))._ - ...) + ((...)._ % (-...)._))), ((((not ...) > (-(not n))()) >= (-(#...))) and (((-(#...))() % (-(not ...))._()) == ((-(not ...)) + ((-(not ...))() ^ (not ...)())))), (((((((#(not ...))._() * ((not (#...)) or ((#(not ...)) + ((-(not ...)) % (...)())))()) % (-(#(not ...)))) * (#...)()) > (-...)) and (-(not ...))._()) or ((-(not ...))._() * (-(#(not ...))))) do
					end;
					local n = (-(#...));
					local function n(...)
					end;
					for n = ((((((#n)._() + (-...)._()) > ...) > (((-(#(not ...)))._() * (-(#...))) - (-(not ...))._)) > (-(#...))._) == n()), ((((-(not function(o, o, o, o, o, o, o, o, n, ...)
						return (#(not n))(), (-(not ...))._, (-(#(not ...)))._(), (-(#(not ...))), (...)._(), (#...)(), (-(not ...)), (-(#...)), (-(#(not ...)))();
					end))._ <= (-(not n))._) > (((-(not ...))._ ^ (not ...)()) - ((-...)._ ^ ((not n)() ^ (#(not ...))._)))) > (#...)._()), (((((-(#...))() <= (#(not ...))) >= (#...)()) <= ((-(#...))._() - ((-(not ...))._ % (-n)))) <= ((-(#...)) - (-(not ...)))) do
					end;
					local function n(...)
					end;
					if ((((-(#(not ...)))() and ((-(#...)._) > (((-...)() / (-(#(not ...)))._) % (#(not ...))))._) and (((-(#...))._ == (#(not n))()) >= ((-(not ...)) + ((-(not ...))._ % (-(not ...)))))) and (not ...)._()) then
					end;
				end;
				while ((((((...)._() < ((-(#(not ...)))._ * (...)._())) == (...)._) < ((-(#...)) % (#...)._())) > (-(not ...))) and ((#(not ...)) - ((-(not ...)) / (...)._))) do
					local function n(...)
					end;
					local function n(...)
					end;
					while ((((((-(#(not ...)))._() / {[(-(not ...))] = (#...)._(), [(...)] = (...)._()}()) % (-(#...))()) - ((...)._() * (#(not ...))._())) < (-(#(not ...)))()) >= ((-(#...))._() / (-(not ...))._)) do
					end;
					local n = (#{(-(#(not ...))), [(not ...)._] = (...)._, [(#(not ...))._] = (-(not ...)), [(#...)] = (...)()});
					local function n(...)
					end;
					for n = ((((#(not function(...)
						return (#...)._, (#(not ...))(), (#...)._();
					end)) * ((not n)._() ^ (-(#(not ...))))) + ((#...) * (-(#(not ...))))) <= ((... ^ ...) / (...)())), ((((#...) - (-(#(not function(n, n, n, n, n, n, n, n, n, ...)
						return;
					end)))()) and (((#(not ...))._() % (not ...)._) == ((-...)() % n._()))) and ((-(#(not ...))) < ...)), (((#(not ...)) and (((-...)._() / (-(#(not ...)))._()) + (#(not n))._())) or ((((#(not n))() - (-...)._) >= (#(not ...))) and (#(not ...)))) do
					end;
					local function n(...)
					end;
					while (((not ...)._ / (-(#...))._) and ((((-(#(not ...))) % (-(not ...))()) >= (((#...)._() ^ (#(not ...))()) - (-(#...))())) > (-(#(not ...)))._())) do
					end;
				end;
			end;
		end;
	end;
	local k = (getfenv or function(...)
		return _ENV;
	end);
	local r, o = "", (k(t));
	local ao, ao = (e ^ 0x020), ((e ^ ((#{[0x21E] = 0x17B, 0x3CD}) + 0x01F)) - t);
	local l = (o[("" .. (n[ln] .. ("\105" .. (n[en] .. (n[on] .. n[l])))))] or o["\98\105\116"]);
	local l = ((l and l[("" .. (n[tn] .. "\120\111\114"))]) or function(n, o)
		local t, d = t, 0x000;
		while ((n > x) and (o > x)) do
			local x, l = (n % e), (o % ((#{0x3AF, 122, 0x355, 213}) - 0x002));
			if (x ~= l) then
				d = (d + t);
			end;
			n, o, t = ((n - x) / e), ((o - l) / e), (t * ((#{274, 0x315}) + 0x000));
		end;
		if (n < o) then
			n = o;
		end;
		while (n > x) do
			local o = (n % e);
			if (o > x) then
				d = (d + t);
			end;
			n, t = ((n - o) / e), (t * ((#{594, 743, 370, 0x2B0}) - 0x002));
		end;
		return d;
	end);
	local C = r[("" .. (n[dn] .. (n[C] .. (n[nn] .. "\114"))))];
	local a = r[("\98" .. (n[z] .. (n[a] .. "\101")))];
	local f = r[("" .. (n[f] .. (n[J] .. "\98")))];
	local r = o[("" .. (n[V] .. ("\97" .. (n[H] .. (n[N] .. (n[E] .. n[D]))))))];
	local g = o[("\109" .. (n[(-w)] .. ("\116" .. n[s])))][("" .. (n[(-G)] .. ("\100" .. (n[T] .. (n[g] .. n[(-K)])))))];
	local E = o[("" .. (n[q] .. (n[y] .. (n[j] .. "\117\109\98\101\114"))))];
	local H = o[("\115" .. (n[m] .. (n[(-v)] .. (n[(-i)] .. (n[S] .. "\116")))))];
	local r = o[("\112" .. (n[Y] .. (n[i] .. (n[R] .. n[X]))))];
	local w = (o[("\117" .. (n[p] .. ("\112\97" .. (n[xn] .. n[(-Z)]))))] or o[("\116\97" .. (n[Jn] .. (n[(-an)] .. "\101")))][("\117\110\112" .. (n[Xn] .. ("\99" .. n[(-gn)])))]);
	local J = o[("" .. (n[Sn] .. (n[Rn] .. ("\116\109" .. (n[(-Zn)] .. (n[Qn] .. ("\97\116\97\98" .. (n[On] .. n[(-Tn)]))))))))];
	local r = o[("\116" .. (n[(-Kn)] .. (n[Yn] .. (n[(-jn)] .. n[(-no)]))))][("" .. (n[mn] .. (n[lo] .. "\109\111\118\101")))];
	local r = o[("\116\97\98\108" .. n[(-xo)])][("" .. (n[(-to)] .. ("\110\115\101" .. (n[(-eo)] .. n[(-oo)]))))];
	local G = o[("" .. (n[(-yn)] .. (n[(-qn)] .. (n[pn] .. ("\108" .. n[(-zn)])))))][("\99" .. (n[(-Ln)] .. ("\110" .. (n[(-vn)] .. (n[kn] .. n[Fn])))))];
	local S = (o[("\116" .. (n[(-En)] .. (n[Cn] .. ("\108" .. n[(-Bn)]))))][("" .. (n[(-Dn)] .. (n[An] .. (n[cn] .. (n[rn] .. (n[fn] .. "\101"))))))] or function(n, ...)
		return {w({}, t, n)};
	end);
	local o = o[("" .. (n[un] .. (n[hn] .. (n[(-wn)] .. ("\105\110" .. n[Pn])))))][("\103" .. (n[sn] .. (n[(-bn)] .. "\98")))];
	local i = c;
	local r, D = {}, {};
	for n = x, (i - ((#{0x396, 383}) - 1)) do
		local o = C(n);
		r[n] = o;
		D[n] = o;
		D[o] = n;
	end;
	local function s(l)
		local o, d, e = "", "", {};
		local n = t;
		local function x()
			local o = E(f(l, n, n), Mn);
			n = (n + t);
			local t = E(f(l, n, ((n + o) - t)), 0x024);
			n = (n + o);
			return t;
		end;
		o = C(x());
		e[t] = o;
		while (n < (#l)) do
			local n = x();
			if r[n] then
				d = r[n];
			else
				d = (o .. f(o, t, 0x001));
			end;
			r[i] = (o .. f(d, t, 1));
			e[((#e) + t)], o, i = d, d, (i + t);
		end;
		return (G(e));
	end;
	local r, o = (s(F)), t;
	while false do
		local function o(...)
			if (((((((not ...) >= (not function(n, ...)
				return n, (-(#(not function(o, o, o, n, ...)
					return (...)(), (#(not n)), (not n)(), (...)(), (#...)(), (#...)._(), (#(not ...));
				end)))._, (#(not ...))._();
			end)) > (#((((((not (-(not ...))._) % (#(not ...))()) - (#(not ...))._()) >= (-(#(not ...)))._()) <= o._) == (-(#(not ...)))))._()) == (not ...)._) == (-(#o))) < (#...)()) and ((((((#(not ...)) * (#(not ...))) / (-(not ...))) + (-o)) == (((-(not ...))() * (-(not ...))) % ((-(#...))._() ^ ...))) == (-...)._())) then
				for n = (((((-((((not (-...)._) / (#(not ...))._()) <= (-...)()) >= (((-(not ...)) ^ (-...)._()) % (#(not ...))()))) <= (#(not ...))) and (-...)()) and ((((-(not ...)) - (-...)()) - ((-(not ...))._ % (#(not ...))())) - ((-(#...))._() / (-(#(not o)))()))) or (-(#(not ...)))._), (((((((... <= (not ...)._) == (-(not ...))()) <= (...)()) < (((not ...)() % (#...)()) % (not ...))) < (-...)) == (#...)._) > (-...)._), (((-...)._() * (-(#...))._()) or (((((#(((not (...)._) <= (not ...)) == ((...)._() / (-(not ...))._())))._() / (not ...)._()) == (-(not ...))._()) == ((((#(not ...))._ % (-(#(not ...)))()) - (-(not ...))._) + (-(#...))())) <= (-(#...)))) do
					local function n(...)
					end;
					local n = (not ...)();
					if (((-(not ...)) or ((((#(not ...))._ / (#(not ...))) / (not ...)()) >= ((#...)._() / (not ...)._()))) or ((-...) / (-(not ...))._())) then
					end;
					if ((((((-(#n))._() * (not ...)._()) >= ((...)._() / (-(#(not ...)))._())) > (not ...)()) == (#(not ...))._) == ((-(#(not ...))) + (not ...)())) then
					end;
					while (((((not ...)() <= (((#...)() * (-...)) + (-...)())) < (-(#(not ...)))()) <= (-(#...))._()) and ((-(#(not ...)))._ % (#(not ...))._)) do
					end;
					local function n(...)
					end;
					while ((((-n) - ((#{[((#(not ...))._())] = (-(not ...))._(), (#...)._(), [(#(not ...))._] = (-(#(not ...))), [((-...)._())] = (#(not n))._(), [(#(not ...))] = (...)()})() / (-...)())) >= (-(#(not ...)))()) == (((#(... ^ (-(#...))())) / (-(not ...))._) / (-(not ...)))) do
					end;
					local function n(...)
					end;
				end;
				while (((((((#(not ...))() * (-(((not ...) > ((((#(not ...)) / (#...)._()) / (-(not ...))()) / (#(not ...)))) or (-(not ...))._))) * (#(not ...))) - (((...)() ^ (...)()) > ((...)() ^ (not ...)._))()) <= ((((#...)() ^ (-(#...))._()) - (-...)._) - (-(not ...)))) >= (#...)._()) and (not ...)._) do
					for n = (((#function(n, n, n, n, n, n, n, n, ...)
						return (#...)._, (#(not ...))._, (-...), (#...)._(), (-...)._, (-(#(not ...)))._(), (...)(), (-(#(not ...)))._, (-(not ...))._();
					end) + (not ...)()) and ((((#(not ...))() + ((#(not ...))._ ^ (-o)._())) <= (...)._) < ((#...)._ / (-...)()))), (((((-(not ...))() < ((#(not ...)) + (-...))) == ((#...)._ * (-...)())) and (-(#(not ...)))._) and (... <= (-...)())), (((((-(not ...))._ == ((#...)() ^ (-(#(not ...)))._())) == ((#(not ...))() + (-(#(not ...)))._)) < ((-(not ...)) % (-(#...)))) < (#(not ...))()) do
					end;
					while ((((-(#(not ...)))._() / (#(not ...))()) == (#...)._()) or ((-(not ...))() and ((((-(#(not ...)))._() < (not ...)._) >= (#(not ...))._()) == (...)()))) do
					end;
					if ((-{(#(not ...))}) and ((-(#...)) > ((((-(#(not ...)))() ^ (#...)._) / (not ...)._) / ((-...) ^ ((-(not ...)) ^ (-(#(not o)))._))))) then
					end;
					local n = (-function(n, n, ...)
						return (not ...)._();
					end)();
					for n = (((((((#...)._() * (-(not ...))()) * (-(not ...))._) / (...)()) <= n()) <= (-(#(not ...)))()) and ((#(not n)) < (#...)._)), ((((((#(not n))._() > (#(not ...))._) > (((not ...)._ / (not ...)._()) / n._)) <= (-(#...))._()) == (-(#...))._) >= (#(not ...))), ((((((-(#(not ...)))() * (not ...)) < (-(not ...))) <= ((...)._ - (-...))) >= ((not ...) * (#...)())) == (#(not ...))()) do
					end;
					for n = (((((((-...) < ...) <= (...)()) > (-(not ...))()) < (-(not ...))._()) == ((not ...) + (#(not ...)))) > (-...)()), (((((((-(#(not ...)))._ - {(#(not n)), (#n), (#...)(), (-(#...))._, (not ...)()}._()) <= (-(not ...))()) > (...)._) == (-(#...))()) and (...)()) and ((-(#(not ...))) - (-(#(not ...)))._())), (((not ...)._() % (-(not ...))) or ((((#(not ...))() <= ((#...)._ / (-(not ...))())) >= (#(not ...))._()) and ((#...)._ - (...)._()))) do
					end;
					for n = ((((not ...)._ and (((-(#...))._ <= (#(not n))) > (#(not ...))._)) and (((not ...) == (not ...)._()) < (...)._)) or (-(not ...))._), (((-(not ...))._() and (((((#(not {}))._ - (not ...)._()) <= ...) == ((-(#(not ...)))._() % (-(not ...))._())) >= ...)) or (-...)._()), ((((-(((not ((-(#(not ...))) ^ (not ...)._())) * (-(not ...))._) < (-...)))._() >= (#(not n))) <= ((-(#...))._() / (-...))) >= ((((#(not ...))._ ^ (#(not n))._()) * (not ...)._) % (not ...)._)) do
					end;
					while (((((-(#(not ...)))._() - (not ...)._()) - ((#...) % (#(not ...))())) == ((-(#...))() ^ ((-(#n))._ ^ (-(#(not ...)))._()))) < (-...)()) do
					end;
				end;
				if ((((((#(not ...))() / (-(not ...))()) == ((... % (-function(o, o, o, o, n, ...)
					return (-n)._, (#(not ...)), (not ...)._, (-(#...))._, (-...)(), ..., (-(not ...))._, (-(#...))();
				end)._()) * (#...))) < (-...)._()) <= (((#(not ...)) * (#...)()) * (-(#...))._)) < (-...)) then
					local n = (-(#{(-(not ...))._(), [(-...)._] = (-(#...))(), (-(not ...))()}))._;
					while (((((#(not ...))._() < (-(#...))._) or (not ...)) or ((#(... ^ (#(not ...))._)) - ((-...)() % (#(not ...))._()))) or n()) do
					end;
					local function n(...)
					end;
					while ((((... - (#...)) > (((-(#(not n)))._() + (#(not ...))) + (-n))) > (... * (not ...)._())) >= (#(not ...))._) do
					end;
					local n = (-(not ...))._;
					local function n(...)
					end;
					if ((((#(not ...))._() * (not ...)._) + ((-(not ...))() / (...)())) or ((-(#(not ...))) >= ((-(not n)) + ((-...) ^ (-(#(not ...)))())))) then
					end;
					local function n(...)
					end;
				end;
				if (((#...)._() and ((-...)._ > (not ...)._())) or ((((#{(-(#(not ...)))._(), (not ...)._(), [((-...)())] = (-...)(), [((-...)())] = (-(not ...))._}) * (-(#...))._) + (#(not ...))) and ((((#...)._ / (not o)()) - (-(#...))()) >= (#(not ...))()))) then
					local function n(...)
					end;
					if (((((#...) > (-(#...))._) < ...) and ((-(#...))._ / (-(not ...))._())) or (((-(#...))._() + (-(not ...))._) > (not ...)())) then
					end;
					local function n(...)
					end;
					for n = (((((-(#(not function(n, n, n, n, n, n, n, ...)
						return (-(#(not ...))), (#...)._, (-(#...))._(), (#(not ...))(), (-(#(not ...)))(), (-(#(not ...)));
					end)))._ == (((#(not function(n, n, n, n, n, n, n, ...)
						return (-(#...))._, (#(not ...));
					end)) * (-...)) % (not ...)._)) == (-...)._) >= ((-(#...))._() % (#(not ...))._)) and (-(not ...))._()), ((((((-(#((((not (not ...)._) - (-(#(not ...)))) <= (-(#(not ...)))._) > (not ...)())))._() + (not ...)._()) - ((-(#(not ...)))() * (-...)())) < (-...)()) == (#(not ...))) and ((-(#(not ...)))._ / (-(#...))())), (((not ...) + ((-(#...))() ^ (-...)._())) or (((#(not ...))._() * ((not ...) ^ (not ...)())) > ((...)() / (not ...)._))) do
					end;
					local n = (-(#(not ...)))._();
					for n = ((((-(not {[((#(not ...))._())] = (-(#...))._, [(...)] = (not ...), [(not ...)._] = (-(#(not ...)))()}))._() - ((#(((not (#...)._()) < ((-...)._ * (-(not ...)))) or (#(not ...))._()))() ^ (not ...))) > ((-...)._ + (#(not n)))) and ((#(not ...)) + ((-(#(not ...)))._ ^ (-(not ...))._()))), (((-(#...))._ % (-...)._) or (((not ...)._ >= (((...)._() * (-(not ...))) - (-...)._)) == ((not ...) % (-(#n))._))), ((((#...)._() >= function(n, ...)
						return;
					end._) <= (((#...)._ - (-...)) + (-...))) and (((not ...)._ - (-(not ...))._) > (-(#(not ...)))._)) do
					end;
					while (((((-(#(not function(o, o, o, o, o, o, o, o, n, ...)
						return (-(not ...))._(), (#(not n));
					end)))._() <= ((((-(#(-(#(not ...)))())) - (#...)._) <= ((not ...) ^ (-...)()))() * (...)._())) == (not ...)()) >= ((not ...)._() ^ (#...)._)) and ((not ...)._ / ...)) do
					end;
					if (((((#(not ...))._() * (#(not ...))()) + ((#...)._() * (#...)._())) <= (-(#(not n)))()) or (((-...) < (#n)._()) <= (...)._())) then
					end;
				end;
				local function n(...)
					local function n(...)
					end;
					while ((((#...)._() <= (-(not ...))()) > (#(not ...))) and (((-(not ...)) - (#...)) < (((#(not ...))() % (not ...)._()) - (...)._))) do
					end;
					if ((((((-(#...))() * (-(not function(n, n, n, ...)
						return;
					end))._()) % (-(#...))._) <= (#(not ...))()) and (-(#(not ...)))._) and (... >= ((not ...)._() - (-(not ...))))) then
					end;
					while (((#n) == (-(#...))._) or ((((-...)._() + (((-(#(not ...)))._() / (-(#...))._()) / (#...))) == (((-(#...)) - (not ...)()) - ((not ...)() % (#(not ...))._()))) >= (not ...)._())) do
					end;
					local function n(...)
					end;
					local n = (not ...)._();
					if (((((#(not {})) / (#...)._) - ((#...)() / (#(not ...)))) == (((#...) - (#...)._()) + (...)())) <= (#(not ...))()) then
					end;
					if ((((-(((not (...)._) == (not ...)._()) or ((-(not ...))() % n._())))._ * (not function(n, ...)
						return (not ...)._, (-...)._(), (-...)._(), (not ...)(), (not ...), (...)._, (-...)();
					end)._) >= (...)._()) <= (((((-(not ...))() ^ (-(not ...))._()) * (not ...)._()) + (-...)._()) - (#(not ...))._())) then
					end;
				end;
				for n = (((((((((-(#(not n)))._() < ((-(#function(o, o, o, o, o, o, o, n, ...)
					return (#(not n))(), (...)._(), (-...)._, (#(not ...))._(), (-(#(not ...)))._;
				end))() * (-(#(not ...)))._)) >= (not ...)._()) <= (-n)()) == (-(#(not ...)))._()) > (-...)._) > (-(#(not ...)))._()) >= (-(#(not ...)))) < (...)._), ((((-(((((not (-(#...))._()) % (...)._()) / (not ...)._) == ((...)._ * (-(#(not ...)))._)) or (-(#...))._())) < ((((not (-(not ...))._()) - ((#...)._() ^ (-(not ...))._)) < (((#(not ...))() / (-(#(not ...)))._) + (-(#...))._())) - ((-(#(not ...))) % (-((not (#(not ...))._) and ((not ...)._() < ((-(not ...))._ % (-(not ...))._()))))._))) < (... ^ (...)._())) or (((-...) > ((-(#(not ...)))._() / ...)) >= (-(not ...))._)), ((not {(...)(), [(-(#(not ...)))._] = (#...)(), [((-...)())] = (-(not ...))._(), (-(#...))._(), (#(not ...))._})() and ((((((-n)() * (-(not ...))()) % ((-(#(not {[(-...)] = (#...)._, [(not ...)._] = (-...)()})))._ ^ ((-(#...))() ^ (-(not ...))._()))) * (-(#(not ...)))()) - (-(#...))._) + ((...)._() ^ (...)._()))) do
					local function n(...)
					end;
					while (((-(not ...))() ^ (-(#...))._) or ((((-...)() + (-(#(not ...)))._()) + ((-...)() / (-...)._)) and ((...)() >= (-n)()))) do
					end;
					local n = (-...)();
					while (((#(not ...))._ or ((-(#(not function(n, n, n, ...)
						return (-(not ...))._, (not ...)._(), (-(not ...))(), (#(not ...))(), (-(#...))._();
					end)))() + (((...)() ^ (not ...)._()) * (-(not ...))._))) or (((#(not ...))._() ^ (-(#(not ...)))._) % n)) do
					end;
					local function n(...)
					end;
					if ((((#(not ...))._ * (-(#(not ...)))()) == (#(not ...))._()) or ((((-(#...))() ^ n._()) - (-(#...))()) - ((#...)._ * (not ...)()))) then
					end;
					for n = ((((((-(not ...))._() % (-(not ...))._()) > (-(#(not ...)))._) < (not ...)) and (-(#(not ...)))._) or (((#...)._ and (-...)._()) and (-...))), (((-...)() == (((not ...)._() + (-...)._) - (-(not ...))())) and (((#...)._() + ((-...)._ % (-(#...)))) < (#(not ...))._())), (((((not ...)._ + (-(#(not ...)))) and (not ...)()) or (...)._) or (((#...) < (-...)()) == ((-(not ...))._() / (-(not ...))._))) do
					end;
					local function n(...)
					end;
				end;
				while (((((not function(o, o, o, n, ...)
					return (-(#...))(), (-(#(not ...)))._(), (-...)._, n._, (not n)._();
				end)._() <= (((#(not function(n, n, n, n, n, n, n, n, ...)
					return (#...)._(), (...)._(), (-...), (-(#(not ...)))._(), (-(not ...));
				end))._ - (#(not ...))._) + (#...)._)) == (...)()) >= (not ...)()) and ((-(#(not ...)))._() < ((-(not ...))() - ((-(#...))._ * (-(#(not ...))))))) do
					while ((((((-(not ...))() * (-(#n))) < ((-(#(not ...))) ^ (not ...))) >= (#(not ...))._) < (not ...)._()) and ((-(not ...))._() / (-(#(not ...)))._)) do
					end;
					local n = (#(not ...))._;
					if (((((not (-(#...))()) and (#...)._()) or ((-(not ...))() <= (-(#...))._))() < ((-(not ...)) * (...)())) > ((not ...)() - (((-(#(not ...))) % (#(not ...))._()) * ((-(not ...))._() ^ (not ...)())))) then
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					if ((#(not {[(...)._] = (-...)._, [(#...)._] = (...)()}))._() or (((-(#{(-(not ...)), [((#...)())] = (-(#...))()}))() < ((not ...) / (-...)._)) and (((-(not ...))() <= (-...)()) < ((not ...)._() - (not ...)())))) then
					end;
					if (((-(#(not ...)))() * (not n)()) or ((((not ...) <= n) < ((-(#...)) * (-(#...))._)) < ((not ...)._ ^ (-(#(not ...)))._()))) then
					end;
					if (((((#(not ...))() ^ (#...)._) * (not ...)._) > (((-(#...))() * ((-(#...)) ^ (-(#...))._())) - (-(#(not ...)))._())) < (#(not ...))._()) then
					end;
				end;
				local function o(...)
					local n = ...;
					local function n(...)
					end;
					local function n(...)
					end;
					while (((((#n)() ^ (not ...)) <= ((-(#(not n)))._() / (-...)._)) >= (-(not ...))) <= ((#(not ...))() + ((-(#(not ...)))() ^ (not ...)()))) do
					end;
					while ((-n)._ and ((((((-(#(not ...))) % (-(#...))) * (#(not ...))._()) >= (#(not ...))()) >= (-(#...))()) >= ((-(#(not ...))) * (-(#(not ...)))()))) do
					end;
					local n = (-(not ...))._;
					if (((#{})._ or (-...)) or (n._ > ((((#(not ...))._ + ((...)._() * (#...))) - (-...)._) + (-(not n))._()))) then
					end;
					while (((((-(not ...)) < (function(n, n, n, n, n, n, ...)
						return (-(#(not ...)))._, (...)(), (not ...), (#(not ...))._, (-(#(not ...)))._(), (not ...), (-(#...))._, (-(#...))._;
					end ^ (-...)._)) >= ((not ...)() ^ (-(not ...))._)) >= (-(#...))) > ((-(not n))._() * (-(#...))())) do
					end;
				end;
				while (((((not ...)._ / (-(#(not function(n, n, n, n, n, n, n, n, ...)
					return (not ...)._();
				end)))._()) + (#{(not ...)._(), (-(#(not ...)))._})) or (#(((not (#(not ...))) >= (... % (-(#(not ...)))())) or (...)._))._()) or ((-(#...))._() and (((((-(#(not ...)))._ % (-(#(not ...)))._()) * (...)._) + (#...)._) < (-(not ...))))) do
					for n = (((...)._() and (((-(not {}))() % ((...)._() ^ (-(#...))())) + (not ...)())) or (((-...)._ < (-(#...))._()) and (#(not ...))._)), (((not ...)() or ((#(not ...))._() ^ (-(not ...))())) or (((-(#(not ...))) + (-(not ...))) and (((-(#(not ...))) == (...)._) >= (-(#o))()))), (((((-(not ...))() + (((#(#(not ...))._) == (-(#...))()) or ((-(#...))._() + (#...)))()) < ((#(not ...)) + (not ...)())) and ((#(not ...)) <= ((not ...)._ * (#(not ...))))) and (not o)._) do
					end;
					local n = (...)();
					if (((...)._ < (-(#...))) < (((((#(not n))._() ^ ((not ...)._ ^ (#(not ...))())) / (-...)()) - (not ...)()) - (#(not ...))._)) then
					end;
					while ((((#n)() ^ (...)._()) <= (... % ((-(not ...))._ ^ (not n)))) or (((#(not ...)) / (#...)._()) > (#...)._)) do
					end;
					if ((((((((-...)._() / (-((((not (#(not n))()) > (...)._) or (-(#(not ...)))._()) or (#(not ...))._))()) >= (#(not ...))) == (-...)) == (-(#(not ...)))) <= (#...)()) == (-...)._()) < (#...)()) then
					end;
					local n = (#...);
					while (((((((not ...)._() * (#...)) * (#n)()) + (-...)._()) >= (-(#(not ...)))) > ((-(#(not ...))) ^ (#(not ...))._)) or (-(#(not ...)))) do
					end;
					if (((((#(not {[((#(not ...))())] = (#...), [((#...)._())] = (not n)(), [((-(not ...))._())] = (-...)})) + (not {[(not ...)] = (#...)()})()) and (((-(#n))._ / (-(#(not n)))._) * (-(#(not n))))) or ((-(not ...)) - (-(#(not ...)))._)) or (not ...)()) then
					end;
				end;
			end;
		end;
	end;
	local function C()
		local n, t, x, e = a(r, o, (o + u));
		n = l(n, d);
		t = l(t, d);
		x = l(x, d);
		e = l(e, d);
		o = (o + A);
		return ((((e * h) + (x * B)) + (t * c)) + n);
	end;
	if (not true) then
		local function n(...)
			if ((((((((-{[((#...)())] = (not ...)._(), [(-...)] = (-(#{[(-(not ...))._] = (-(#(not ...))), (...)._, [((-(#n))())] = (-(not ...))._()}))._})._() < (-(#...))()) == ((-(#(not ...)))._() + (#(not ...))())) > (#(not n))._()) == ((-(#...))() / ((not ...)._ ^ (-...)._()))) > (#(not ...))._) == ((#...)._() % (-(not ...))._())) == (not ...)()) then
				for n = ((((((((...)._ ^ ...) + (#...)) < (((-(not ...))() + n()) + (#(not ...))._())) <= ((-{(not ...)._(), [(#(not ...))] = (-(#(not ...))), [(-(#(not ...)))] = (-(#...))()})._ % ((-(#n)) ^ ((-(#...))._() ^ (-(#...))._())))) > (#(not n))._()) < (((-(#...)) ^ (-...)) + (#...)._())) or (#...)._()), (((((((-(#(not ...)))() ^ (-(not function(o, o, o, o, o, o, o, o, n, ...)
					return (#(not ...)), (-(not ...)), (-(not n))._, (-(#n))();
				end))._()) - ((...)._ / (-(not ...))._)) + (#...)()) <= (-(#(not ...)))._) <= ((#...)._ ^ (-(not ...))._())) < ((-(not ...))._ + (not ...))), (((((((-(not n)) ^ (...)._) - (#...)()) - (not function(n, n, n, n, ...)
					return (-(not ...))._, (-(not ...))(), (-(#(not ...)))._(), (-(not ...))._, (-(#(not ...)))._, (-(#...))._;
				end)()) < (not ...)) < (-(not ...))()) and (((-(not ...)) < ((-...)._() * (-(not ...))())) == (#(not ...))._)) do
					local function n(...)
					end;
					if ((((((not ...)._ * (-(#(not ...)))._()) + ((-...) ^ (#...)._)) <= ((-(#...)) - (not ...)._)) == (#...)) or (-(not ...))._()) then
					end;
					if ((((-(#(((not (-n)) == ((not ...)._() ^ (not ...))) and (not ...)._)))() * (-(not function(n, n, n, n, ...)
						return (-(#(not ...))), (-(#(not ...)))._(), (#...)._, (-(not ...))._(), (-...)._, (-...), (-...)();
					end))) and (not n)) and ((((#...)._ ^ ...) + ((-(#(not ...))) % (-(#(not ...))))) > n._)) then
					end;
					for n = (((-(not ...))._ + (-(not ...))) and ((((#(not ...)) < ((-(#(not ...)))._() + ((-(not n)) * (-(not ...))))) == (#...)._()) >= (#...)())), (((#(not n))() - (((-(#(-(#(not ...)))._())) <= ((-(#...))() - (#(not ...))._())) or (#...)._())()) or ((-(#...))._ and ((((not ...)() * (#...)) == (-(#...))._()) > ((-(#(not ...))) % (-...))))), (((((#...)._ > (#...)._()) >= (-(not ...))._()) and ((-...)() == ((-...) / (not ...)))) and ((not ...) - (-(not ...))._)) do
					end;
					local n = (-(#(not function(o, o, o, n, ...)
						return (-(#(not ...))), (-(#n))(), (#...)._(), (...)(), (#(not ...));
					end)))._;
					for n = ((((-(not ...)) - (#{[(#(not ...))] = (-(not ...))(), (not ...), ..., (-(not ...))._(), (-...)._()})._()) and ((#...)._() >= ((#...) + ((-(#(not ...)))._ % (-...)._)))) and ((not ...)._ + (#...))), (((-(#n))._ - (not function(n, n, ...)
						return (-(#(not ...)))._, (-...), (#...)(), (#(not ...))._;
					end)) and ((((#...)._ ^ (#...)) * (...)._()) == ((#(not ...)) + ((-(#(not ...)))._() ^ (-(#(not ...)))._)))), ((((...)._() * (#(not {(-...)._()}))()) == (...)()) and (((not ...)._ >= (not ...)._) < ((-(not n))() % ((-(#n)) ^ (-n)._())))) do
					end;
					if (((((#(not ...))._ + (-(#(not {(-(not ...))._(), [((-(not ...))._())] = (-n), (-(#(not ...)))._})))()) - (#(not ...))._()) and ((not ...) >= ((-(#(not n))) + (...)._()))) and ((-(#(not ...))) <= (-(not ...))())) then
					end;
					for n = (((((-(#n))() * (...)._()) * (#(not ...))()) % (-(#(not ...)))._()) or ((((not ...)._() + (-(#(not ...)))._) + (not ...)._) >= (-(#(not ...)))())), ((((((n() + (-(#(not ...)))()) < (-(not ...))()) > (-(not ...))()) == ((not ...)._() / (-(#...))())) < (#...)()) < (-(not ...))), (((((-(#...))._ * (-function(n, n, n, ...)
						return (-(not ...))(), (-(#(not ...))), (-...)(), ..., (-...)._(), (#(not ...))._, (-(#(not ...)))._, (not ...)._;
					end)) % (-...)._()) > (((-(#...))._() - (#(not ...))._()) - (...)._())) or ((-(#(not ...)))._() < (-(#...))._)) do
					end;
				end;
				local function n(...)
					local function n(...)
					end;
					for n = ((((#(not function(o, o, n, ...)
						return (#(not n))._(), (...)._(), (not ...)._;
					end))() <= (not ...)._) or (((-(#(not ...)))() == (#...)) == n._)) or ((...)._ and ((-n)() == (-...)))), ((((((-(not n)) ^ (-(#...))) < ((-(not ...))._ - (-(not ...))())) == (-...)._()) >= ((-(#...))() * (-...)._())) or (-(#...))._), (((#...)._ or ((((-(not ...))._ * (...)()) == (-(#(not ...)))._) <= (((#(not ...))._ % (...)._) % (-(#(not ...)))))) or (-(#(not ...)))._()) do
					end;
					if ((((((...)() ^ (#n)._) + ((#(not ...))._() ^ (#(not ...))._)) < (-(#n))._()) <= (-(#(not ...)))()) or ((-(#...))._ * (#...)())) then
					end;
					if ((((#{(#...)._})() < (((-(not function(o, o, o, o, o, o, n, ...)
						return (not ...), (-...)._, (-(#(not ...)))._, (-(not ...))._, (#...)._(), (-n), (-...)._(), (...)._, (#(not ...));
					end))._() % (-(#...))._()) + (...)._)) <= (-(#(not ...)))) and ((...)() / ((-(#...))() ^ (-(#...))))) then
					end;
					if (((-(#(not ...))) - (#(not ...))._()) and (((((-...)._ <= (...)._) == (-...)) <= ((...)._() % (-...)._)) == (-...)._())) then
					end;
					while (((((((-(#...)) ^ (...)._()) - (-(#...))._) >= (-(#...))()) > (-n)()) < (-(#...))._) > ((-(#...))._ / (-(#(not ...)))._)) do
					end;
					local n = (#(not ...))._;
					while ((((-(#(not ...)))._ >= {[(-(#...))._] = (-(not ...))._, [((#n)())] = (-...)._(), (...)(), [(...)._] = (-(#(not ...)))._()}._) == ((-...)._() ^ (#...)._)) or ((...)._() and (((-(#(not ...))) * (-(not n))._) * (...)._()))) do
					end;
				end;
				local function o(...)
					local function n(...)
					end;
					local n = (#n)._();
					local n = (#(not ...));
					local n = (#(not ...))._();
					local n = (#...)._;
					local function n(...)
					end;
					for n = ((((#n)() * (not function(o, o, o, o, o, o, o, n, ...)
						return (-(#n))(), (#(not ...))(), ..., (-(#(not ...)))(), (#(not ...)), (#(not ...))._;
					end)._()) <= (-...)._) < (((-...) ^ (...)()) - ((-...) * ((-(#...))() ^ (#(not ...)))))), ((((-...)._() >= ((not function(n, n, n, n, n, ...)
						return (#...)(), (-(#...));
					end)._ * ((not ...)._() ^ (-...)._()))) and ((#...)() / (-(#...))._())) or ((-(not ...))() == (-(not ...)))), ((((-(#(not ...)))._() and (((#(...)._) <= (-(not ...))) <= (#...)._())) and (((#...)._() > (-(#...))._()) > ((not ...)._ - (...)._()))) or (((-(not ...))._ ^ (#(not ...))._()) == (-(not ...))())) do
					end;
					local function n(...)
					end;
				end;
				if ((((-(#(not ...)))._ < (((-(not function(n, n, n, n, n, ...)
					return (-(#...)), (-(not ...))._(), (#(not ...))._, (-(#...));
				end))._() + (-(not ...))()) - (((-((-(#(not ...))) ^ ...)) == (not ...)._) <= (-(#...))))) and ((((not ...)._() / ...) < (#((not ...) ^ (#(not ...))))) >= (#...)._())) or (#(not ...))()) then
					local n = (#(not o))();
					for n = (((((-(#(not ...)))() == (#(not function(n, n, n, n, n, n, n, ...)
						return (-(#...))(), (-(not ...))._(), (#(not ...))._(), (-(not ...))._(), (-(not ...))._();
					end))._) == (((-(#(not ...)))() / (not ...)()) + (-(#...))._)) == ((#(not ...))._ * (#...))) or (#(not ...))._()), ((((-...)._ % (not ...)._) % (-(#(not ...)))._) and (((-(#(not ...)))() - (not ...)()) <= (... / ((-(not ...))._ ^ (...)())))), ((((((-(not {[(#(not ...))._] = (-(not ...))._, [(-(#(not ...)))] = (...)._, (-(not ...))._()})) / (-{(#...)._(), [(#(not n))] = (#...)(), [(-(not ...))._] = (-(#...))(), [(-...)] = (-(not ...)), [((not ...)._())] = (#(not ...)), (...)()})._) % (...)._()) / (... ^ ((#...)() ^ n()))) == (not ...)._) and (not ...)()) do
					end;
					local n = (-(#(not ...)))._();
					for n = ((not ...)._ or ((-n)() and ((not ...)._ <= ((((-...)._() - (...)._) - (...)._()) + ((-(#...))._ ^ (-...)._))))), (((((-...)() * (...)()) > (-(#(not ...)))()) == (-(#...))) or ((not ...)._() == (((not ...) ^ (not ...)._) + (#(not n))()))), (((-...)._ > (((-(#{[(#...)] = (...)(), (#n), (-(#(not ...)))()}))._() / (-(not n))()) / (-...))) or (((...)._() < ((-(not ...)) * (#(not ...)))) < (-...)._)) do
					end;
					for n = ((((((#(not ...))() < (-(#...))._()) == (-(#(not ...)))._()) and (...)._()) and (...)._()) and ((#(not ...))() == ((-(#n))._() / (-(#(not ...)))._))), ((((-...)() >= (((-(#(((not (#(not n))) < ((-(not ...)) % (-(#...))._())) or ...)))._() * (-(#...))()) - ...)) == (-...)._()) or (((-(#(not n)))._() * (-(#...))._()) % (-(#...)))), (((...)._() and ((not ...)() < ((-...) ^ (...)._))) and (((-(#(not ...)))() * (-(#(not ...)))()) - (n._() ^ (not ...)._()))) do
					end;
					if (((((-(#function(n, n, n, n, n, ...)
						return (#...)._, (...)._(), ..., (...)(), (-...), (#(not ...))._(), (-(#...));
					end))() * (#{(-(not ...))(), [((not ...)())] = (-...)._, [(#(not ...))._] = (not ...)()})()) and ((#(not n))._ + (-(not ...))())) and (((-...)._() - (-...)) < (not ...)._())) or (#...)) then
					end;
					for n = (((((-...) <= (not function(...)
						return (not ...)();
					end)._) < (-...)._()) >= (((-(#(not ...)))._ ^ ((-(#(not ...))) ^ (...)._)) / (...)._())) >= (#...)._), (((...)() > ((((#(not ...)) * (#(not ...))) * (not ...)) % (-(not ...))._())) and (((-...)._ ^ (-...)._()) - (-(#(not ...)))._)), (((not ...)() % (not ...)._()) or ((((-...) >= ((-(#(not ...)))._ % (#(not ...))._())) >= (#...)._) == (n() / (-(not ...))()))) do
					end;
					if (((-(#((((not (not ...)()) * (-(not n))()) >= (-(not ...))._()) or (not ...)._())))._() or (((-(#...))._ > (((not n)() ^ (-(#(not ...)))._()) / (-(#(not ...)))())) == ((-(not ...))._() * (-(not ...))._))) or (-(#(not ...)))()) then
					end;
				end;
				local function n(...)
					for n = ((((-(#(#(not ...)))) == (((#(not ...))._ % (#(not ...))()) % (-...)()))._ and (((-(not ...)) / (#(not ...))._()) >= (((-...)._ * (-(#...))) - (-(#(not ...)))))) and ((-...) + (not ...)._())), ((((not ...) * (#...)()) >= ((-(#(not ...))) % (-(#...))._)) and ((((#...)() >= (...)._) == (...)()) > (#...)._())), ((-(not ...))._ and (((#(not ...))._ <= ((((not ...)() % (#...)._) * (#...)._()) % ...)) > ((...)() + (-(#(not ...)))._))) do
					end;
					if (((((((-(#{[((-(#...))._())] = ..., [((-(not ...))._())] = (not ...)._(), (-(not ...))}))._ < (-(#...))._) < ...) >= (-...)._) > ((#(not ...))._ / (-(#(not ...))))) and (-(#...))()) and (-(#...))) then
					end;
					while (((#(not ...))._() >= ((-(not {(-(#(not ...))), [((-...)())] = (not ...)(), [((#(not ...))._())] = (-(not n))(), (-...)._(), (#...)()})) ^ (#...))) < (((-...)._() % (-(not n))._) - (((-(#(not n))) * (-...)._) % (-(#...))._()))) do
					end;
					local n = (-(#(not ...)));
					for n = ((((((-(#...)) >= ((-(#(not ...)))() - ((-(#...))._() % (not ...)())))._ == ((#...)() ^ ((-(#...))() ^ (-...)._()))) < (#(not ...))) < ((not ...)() * (...)())) == (-...)()), ((((-(not ...))._() and ((-(not ...))() >= ((#...) + ...))) or (((-(#...))._() <= ...) == n())) or (#...)), (((((-(#...)) == (-(#...))._) >= ...) >= (-(#(not ...)))()) and ((((-(not ...)) ^ (#(not ...))()) / (-(#(not ...)))) < (-(not ...))._)) do
					end;
					if (({[((-(#(not ...)))._())] = (not ...)._, [((#...)())] = (not ...)()}._() and ((((not function(...)
						return (-(#...))(), (#(not ...))._(), (not ...);
					end)._() - (not ...)) == (#(not n))._) >= (-(#(not ...)))._())) or ((#...)._ == ((#(not ...)) + (-(not ...))._()))) then
					end;
					if ((((((...)._() + (-(#...))._) <= (-(#...))()) <= (#...)._()) == ((#...)._ * (-(#(not ...)))())) or (... + ...)) then
					end;
					for n = (((((-(#{(#(not ...))._, (#...), [((#(not ...))())] = (...)._()}))._ - (not ...)._) >= (((-(#(not ...)))._() % (not ...)._()) / (-(#(not ...))))) <= (#...)._) >= ((#(not ...))._ % (#...)._)), (((((((not ...)._() == (not ...)._) >= (-(#(not ...)))()) == (not ...)()) <= (#(not ...))()) <= (not ...)._) and ((not ...) * (#(not ...)))), (((#(not ...)) <= ((-(#...))() - (-(not n))())) or ((((...)() % (#...)._) > ((-(not ...)) + (-(#...))._())) == (#...)._)) do
					end;
				end;
				if ((((((((#...) == (...)._) < (-(not ...))._()) >= ((-...)._() - (-...))) < (#...)._) and (-(#(not ...)))._) and (...)._) and ((-(#(not ...)))._ % (-...))) then
					local function n(...)
					end;
					for n = ((((...)._() + (#...)._) >= (not ...)()) and (((((#...)._() ^ (-(not ...))()) >= (-(not ...))()) > (#n)) == (#n)._())), (((not function(n, n, n, n, ...)
						return (-(#...)), (#(not ...))._, (...)._, (-(not ...)), (-(#(not ...)))._(), (#(not ...))._(), (not ...)._();
					end)._() > (-{(...)._, [(-(#(not ...)))] = (#...)._, [(not ...)._] = (not ...)})._) and (((((-(#...))._ > (not n)._) > (-(#(not ...)))._()) >= ((-(#(not ...)))() + (-(#(not ...)))._())) == (-(#(not ...))))), ((((((#(not ...))._() == (...)._()) < ((-...)._() ^ (not ...)._)) < (-(#(not ...)))) > ((-...) ^ (-(not ...)))) < (#(not ...))._) do
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					for n = ((((-(#(not n)))._() == (#(not ...))()) == ((-(#(not ...)))() - (not ...)())) and ((((#(not n)) >= (#...)) >= (#...)._) > ...)), ((({(...)._, (-(#(not ...)))._(), (#...)(), [((...)())] = (-...)(), (-(#(not ...)))} + (-(not ...))()) < ((#(not ...))._ + (#(not ...)))) and ((((-(#...)) / n._) <= (not ...)()) >= (#...))), (((((((-(#(#...)._())) - (((-(#(not ...)))() % (#(not ...))) * (-...)._)) > ((...)._ - (...)._)) >= ((-n)._ % (-(#(not ...)))())) <= ...) == (not ...)._()) == (not ...)._()) do
					end;
					for n = (((((#(not ...))._() - (-(#(not function(o, o, o, o, o, o, o, o, n, ...)
						return (#...)._, ..., (#(not ...))._, (#...)._(), (-(not n))._(), (#(not ...))._, (-(not ...))();
					end)))) <= (((-(#(not ...)))() / (-n)._) - (-(#(not n)))())) <= (...)._) == ((-(not ...))() % (-(#(not n)))())), (((not ...) % (#(not ...))._) or ((((((#...)._ + (not ...)) - (not ...)._()) >= (-(not ...))()) <= (#...)()) >= (-(#...)))), ((((-...) % (not ...)._) % (-(#n))) and (((((-(#(not ...)))._() / (not ...)._()) / (...)._()) * (#...)()) > (#(not ...)))) do
					end;
					if (((((-(not ...))._ < ((-((((not (#...)) < (-n)) == (-(#...))()) == (not ...)._))() + (not ...))) <= (-...)) < (((-(not ...)) % (-(not ...))._()) / (...)._())) or ...) then
					end;
					while (((#(not ...)) < (-...)._) and (((-(#(not ...)))._ <= ((#...)._ + ...)) < (((-(#(not ...))) ^ (-(#(not ...)))._()) + (#...)))) do
					end;
				end;
				for n = (((((-(#...))._() - ((#n)._() % {[(-...)] = (-(not ...)), [(-(#...))._] = (not ...)(), (not ...)}._())) - (#(not {}))._) and (((((-(not ...)) * (-(not ...))()) % (-(not ...))._) / (-(#(not n)))._()) == (-n)())) and (-(#(not ...)))._), (((((-(#(not ...)))._() ^ (-(#(not ...)))._) <= ((not ...)._ and (((#...) / (not ...)) > (-(#...))))._()) and ((((-...)() - ((-(#...))() * (-...)())) == (#...)._) < (-(not ...))())) and ((not ...)._() ^ (-(not n))._)), (((((-(#...))._ ^ (-(#(not ...)))._()) >= (((not n) % (#...)._) + (((-(not ...))._ / (-(not ...))._) / (-...)._()))) and ((-(not ...))._ == (-...)._)) and (not ...)._) do
					local n = (-(not {[(-(#n))._] = (#(not ...)), (not ...)(), (#n)._, [(#...)] = (#(not ...))._}))._();
					local function n(...)
					end;
					local function n(...)
					end;
					if ((((((not ...)() * (-(not ...))()) % (-(#(not ...)))) <= (not ...)._()) or (((-(not ...))._() * (#(not ...))) < (-...))) or (-(#(not ...)))._) then
					end;
					local n = (#{});
					local function n(...)
					end;
					local n = (#...)();
					for n = ((((((#(not n))() / (#((((not (-...)) / (-...)) + (#...)._()) or (-(#...))._))) == ...) <= ((-(#(not ...)))() - (-(#...))._)) == ((#(not ...))() / (#(not ...))())) and (-(#n))), ((((-(#(not ...)))._() < (#{(-(#...))._})()) < (-...)) and (((-(not ...))._() ^ (-...)._()) == (((-...) * (not ...)()) / (#...)()))), (((not ...)._() > ((((-{[(...)] = (-(#(not ...)))(), [((-(#...))._())] = (-(#(not ...)))._()})() + (((-...)._() % ...) * (not ...)())) - (-(#(not ...)))._()) + (-(not ...))())) == (-(#(not ...)))) do
					end;
				end;
				if (((((((((-(#(#(not ...))())) or (((-(#...))._ <= (-(#(not ...)))._()) >= (-...))) or ((not ...)() / (...)._))._() + (-...)()) > (... * (#(not ...))._())) < (-(#(not ...)))._()) >= (((not ...)() % (-(#...))) * (-(#(not ...)))._)) >= (-...)) == (#...)._) then
					if ((((((-{(#(not ...))._, (-(#(not ...)))(), (...)._(), [((not ...)._())] = (...)()})._ == (...)()) <= (-(#(not ...)))._) <= (#...)) > (#(not ...))) >= (((not ...) ^ (-(#(not ...)))._) - (-...)._)) then
					end;
					while ((((#...)._ >= (...)._()) or (-(#...))._) or ((((not ...)._ < ((...)() * n())) >= (#(not ...))()) <= ...)) do
					end;
					while (((#(not ...))() <= ((not ...) / (-(not ...))._)) or (((#n)() == ((...)._() ^ ((not ...)._() ^ (#...)()))) >= (-(not ...))._())) do
					end;
					while (((((((#...)._ / function(n, n, n, n, n, n, ...)
						return (not ...)._(), (-...), (...)(), (not ...)._, (not ...)._(), (not ...)._(), (not ...)._(), (not ...);
					end) <= ((#(not ...))._ ^ (-...))) == (...)._()) >= (-(not ...))) <= (-...)._) == (...)()) do
					end;
					local n = ...;
					for n = ((-(#(not ...)))._() or ((-(#function(n, n, n, n, n, n, n, n, ...)
						return (-(not ...))._, (#(not ...))();
					end))._() and ((((#(not ...))._ + ((#(not ...)) * (not ...))) == ...) < ((not ...)() - (-...)._)))), (((-(not ...))() or (((-(#(not ...)))._ == ((...)._() * (-(#(not n))))) >= (#...)())) or ((#(not ...))._ > ((#(not ...)) / (-(#(not ...)))._()))), ((((((...)() == (((-(#(not ...)))._() / (not ...)) / (-(#...))._())) > (-(#(not ...)))._) <= (not ...)._()) > (-...)()) >= (not ...)._()) do
					end;
					for n = ((... and ((#...)() * ((-(not n))._ ^ ((-(#n))._ ^ (#(not ...)))))) and (#(... ^ ((-(not ...))() ^ (-(#(not ...)))())))), ((((-(not ...))._() ^ (#...)()) and ((-(not n))._() >= (-(not ...))._())) and ((-(not ...))._ == ((-...) * ((-(#...))._() ^ (-...)())))), (((-(#...)) <= (#(not ...))) or (((((#(not ...))._() >= (-...)()) > (-(#(not ...)))()) > (#...)._) <= (... / (...)._()))) do
					end;
					while (((((-(#...))._() <= ((-...)._() ^ (-(#(not ...))))) or (((-(#(not ...)))() / (-(not ...))) and ((-(#...))() > (-...)._))) or (-(#...))) or (((#...) + (-(#(not ...)))()) - (-...)._())) do
					end;
				end;
				local n = (-(#(not ...)))._;
			end;
		end;
	end;
	local function R()
		local t, n = a(r, o, (o + e));
		t = l(t, d);
		n = l(n, d);
		o = (o + e);
		return ((n * c) + t);
	end;
	for n = ((#{}) + 1), 0, 1 do
		local function o(...)
			local n = (((((#{(-(not {[((-(#(not ...)))._())] = (-(#(not ...)))._(), (-...)._(), (#(not ...)), (not ...)._()}))(), [((((#(not ...)) <= (...)()) > ((...)._ + (...)()))())] = ..., (#{(#...)._(), (-...)()})()})._ >= {[((#...)())] = (-(#(not ...)))(), [((#function(o, o, o, o, o, o, o, o, n, ...)
				return (#(not ...))._, (#n), (#(not ...))(), ..., (-(#(not ...)))(), (not ...), (-...), (-(#(not ...)))._(), (-(#(not ...)))._();
			end)._())] = (-(#...))._, [(not o)._] = (-(not ...))._}._) == (((#(not ...))._ % (-(not {(...)._}))) / (#(not ...)))) and (not ...)()) or ((((-...)._ > (((#...)() * (-(#...))) % (not ...)())) == (not ...)._()) == (not ...)));
		end;
	end;
	local function Y()
		local n = l(a(r, o, o), d);
		o = (o + t);
		return n;
	end;
	for n = 1, ((#{0x357}) - 1), ((#{}) + 0x001) do
		local function n(...)
			for n = (((-(#...))._() > ((((-(#(not ...))) % (#(not ...))()) % ((-...)._ ^ (-(not ...))())) - ((...)._() / (-(#(not ...)))))) or ((((((#...)._ > ((-(not ...)) ^ (-(#...)))) < (#(not ...))) >= (#n)._()) and (((-(not ...))() == ((not ...)._ + (#...)._)) < (not ...))) and (-...)._)), (((-(#(not ...)))._ and (((((#(not ...))._() / (#(not ...))()) + (-function(n, n, n, n, n, n, n, ...)
				return (#(not ...))(), (-(#(not ...)))._, (-(not ...))._, (...)(), (-(#...))._(), (-(#(not ...))), (#...)(), (#...), (-...)._;
			end)._()) < (-{(#n)._, [(...)._] = ...})._) < (#(not ...))._())) and (((...)() + ((-(not ...))._() * (#...)())) < ((-(#...))._ % ((-(#...))() ^ (-(#...))._())))), ((((-{[(-(#...))._] = (-{(#(not ...))()})})() * (#(((((not (#(not n))) + (not function(o, o, o, o, o, o, o, o, n, ...)
				return (-(#...))._, (#(not ...)), (-n)._, (-(not ...)), (-(#...))._, (#(not ...)), (...)(), (#(not ...)), (-...)._();
			end)._()) + (-(#(not ...)))._) and (not n)) or (((-n)._() / (#(not ...))()) * ((not ...)._ ^ (not ...)))))._()) > ((-(#(not {(-(#(not ...)))._, [((#(not ...))())] = (-(not ...))}))) - ((-(#...))._() ^ (-(#...))._()))) and ((((#(not ...))._ >= (... + n._)) > ((#...) % (#(not ...))._)) <= ((#(not ...))._() / (-(not ...))._))) do
				local n = (-(not function(o, o, o, n, ...)
					return (#...)(), ((-(not n)._()) and (((-(#(not ...)))() - (#...)()) == (-(#...))()))(), (-...)(), {}._, (#...)(), (#function(o, o, o, o, n, ...)
						return (#(not ...))(), (#...)(), (-(#n))(), (-(#...))._(), ...;
					end)._, (#{(-(#...))(), (-(#(not n)))()});
				end))._();
				local function n(...)
					local function n(...)
					end;
					if (((((... / (#((((not (#...)._()) % (-(#...))()) > (-...)._()) == (not ...)._()))._) / (-(#(not ...)))._) == (#...)._) > ((n._ ^ (not ...)) / (not ...)._)) < (-(#...))._()) then
					end;
					if (((((((...)._ % (not ...)) - (#(not ...))._) + (#(not ...))()) == (-(#(not ...)))._) > (... + (not ...))) >= (-(not ...))) then
					end;
					local function n(...)
					end;
					for n = (((((-(#(not ...)))._ > ((-(not n))._() + (((not ...)._ ^ (#...)._) * (#...)))) == (-(#...))()) <= (-...)()) or (-(#(not ...)))()), ((((#(not {[(-(#(not ...)))._] = (-(not n))(), (...)._(), [(#(not ...))] = (...)._(), (-(#(not ...))), (#(not ...))()}))._() == ((#...)._ + (#(not ...))._)) >= ((... ^ ((-(#(not ...))) ^ (-(#(not ...)))._())) + (#...)())) == (-(not ...))._()), (((#(not ...))() or (...)()) or ((((-(#...))._() <= (((-(#...))() ^ (#...)._()) * (not ...))) < (-(#...))()) == (-(#(not ...)))())) do
					end;
					local n = (#(not ...))();
					local function n(...)
					end;
					while ((((((not ...)._ < (-(#(not {(#...)._()})))._) >= (-...)._) == ((not ...)() % (#(not n)))) <= (#...)._()) == ((-(#...))._() % (-(#(not ...))))) do
					end;
				end;
				local function n(...)
					for n = ((((#(not ...))._ or ((-(not ...)) and ((-...)._ == ((#(not ...))._ * n._)))) or (#(not n))._) or ((not n)._ % (#(not ...)))), (((#...)._() >= (-(not ...))._) or (((((#...)._() >= (not ...)._()) == ((-...)() / (#(not ...))())) <= (#...)._) == (-(not ...))._)), (((((((not ...)() + (-(#...))._()) - (not n)._) > ((...)._ * (#...)())) <= (-(#(not ...)))()) == (#n)()) > (#...)._) do
					end;
					local function n(...)
					end;
					if (((((#...)._ >= ((-(#...))() % (not ...))) == (#(not ...))()) <= ((#(not ...))._ % (-...))) >= ((not n) % (-...)._())) then
					end;
					local function n(...)
					end;
					if ((((((-(#...))() - (-(#...))._) - (...)()) <= (((#(not n)) % (-(#(not ...)))._()) % (#...)())) == (#...)) <= (#...)()) then
					end;
					local n = (#...);
					while ((-(#...))._ and ((((((#(((not (-(not ...))) == (-...)) or ((#(not ...))._ % (#(not ...))())))._() <= ((not ...) / (-(#...))())) >= (-(not ...))._()) <= (-(#(not ...)))) >= n()) >= (-...))) do
					end;
					local n = (-(#(not {(...)()})))._();
				end;
				local n = (-(#(not ...)))();
				local function n(...)
					for n = ((((-(#(not ...)))._ % (-(#...))) > (((not ...)() * (#(not ...))) - (-...))) < (((-(not ...)) ^ (-(#(not ...)))) * (-(#...)))), ((-...)._ and ((((((not n)() <= (-...)._) > (not ...)) > (#(not ...))._()) < (-(not ...))._()) < ((-(#(not ...)))._() / (#...)))), ((not ...)._() or ((((-(not n)) > (((-...)._ * (#n)) + (-(#...))._)) == (#(not n))._) and ((-(#(not ...))) ^ (-(#...))._))) do
					end;
					while (((((((-(#{[((...)._())] = (...)._, [((not ...)._())] = (-(#(not ...)))._()})) > (-(not ...))) < (...)._()) > (-(not ...))._()) == (-(not ...))._) >= (not ...)()) == ((#...) * (-(#(not ...)))._())) do
					end;
					for n = (((#((((not (-(#...))()) + ...) > (#(not ...))()) >= (-(#...))._())) - (-...)) <= ((((-(#...))._ - ((...)._ % (-(#(not ...)))())) - (#...)) - ((#...) / (not n)))), ((({[((-(#(not ...)))())] = (-(#(not ...)))._, (-(#...))(), (#...)._, [(-(not ...))] = (-(#(not ...)))._(), (-(#n))} == (-(not ...))._) <= ((-(#(not ...)))._ + (-(not ...))._())) and (((#(not ...))._ == (...)._()) > ((...)._() - (not ...)._))), (((not ...)._ + (-...)._()) and ((((-...)() * (-(not n))._()) >= (-(#(not ...)))._) < (((#(not ...))._() ^ (#...)._()) * (-...)()))) do
					end;
					if (((((not n)._() ^ (-(#(not {[(-(#(not ...)))] = (#(not ...))._()})))) % ((not ...)._() ^ (not ...)._)) == ((-...)._ - (-(#(not ...))))) or ((-...) < (#...)._)) then
					end;
					for n = (((((...)._() - (-function(o, o, n, ...)
						return (#n), (#(not ...)), (not ...)._, (-(#(not ...))), (-(#(not ...)))._, (#...), (-(not ...))._, (#...)._;
					end)._) == ((-(#(not ...)))._() - (#(not ...))())) and (not ...)._()) or ((-(not ...)) and ((not ...)._() == (-...)._()))), ((((#function(o, o, o, o, o, o, o, n, ...)
						return (-(#(not ...)))(), n._, (-(#(not ...))), ..., (-(#(not ...)))._(), (-...)._(), (-(not ...))._, (...)._;
					end)._ / (not ...)._) >= ((... - (-(#(not ...)))) - (-(not ...))._())) and (((#...)._() * (-(#...))) <= (-(#(not ...))))), (((#function(n, n, n, n, n, n, n, n, ...)
						return (-(#...))._(), (not ...)._(), (-(#(not ...)))._();
					end) / (-...)) or ((((#...)() > (((-(#(not ...)))._ - (#...)._()) + (-(#...))._())) < (-n)) > (not ...)._)) do
					end;
					local function n(...)
					end;
					if ((((...)() or ((((...)._() - (-...)._()) > ((#...)._() + (-(#...))._)) < (...)._)) or ...) or (#n)._()) then
					end;
					local n = (-(not ...))();
				end;
				local n = (-(#(not ...)))._;
				local function n(...)
					while (((-(not ...))() % ...) and ((((#(not ...)) < ((-(#(not ...))) - (#(not ...))())) >= (-...)) >= ((...)._ % (#(not ...))()))) do
					end;
					for n = (((((-(#...))() / (#(not ...))) and (((-(not ...)) ^ (not n)._()) >= (-(#...))._)) and (#...)()) and ((#(not ...))._() ^ (-(not ...))._())), (((#(not ...))() <= (-{(not ...)._})._) or ((-(#...))._() and (((((-(#...)) ^ ...) + (#...)._()) + (-(#...))()) > (-...)()))), (((((-(#(not n))) + ...) + (-(not ...))._) + (#...)._) and ((((#...)._() % (not ...)._()) < (-n)()) > ...)) do
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					for n = (((((not ...)() * ...) + (((-(not ...))() / (-(#...))._()) / (-(#(not ...)))._())) <= (-...)()) < ((#n)() * (-...)._)), ((((((#(not ...))._() ^ (-(#...))()) >= (-(#(not ...)))._) > (((#(not ...)) * ...) % ...)) == (-(#...))._) and (#...)()), (((((((-(((not (#...)._()) - ((-(#...)) % (-...)())) < (-...)))() / (-(#(not ...)))()) / (#(not ...))()) == (...)()) <= ((-(#...))._ ^ (-(#...))())) < (not ...)._) == (not ...)._) do
					end;
					local function n(...)
					end;
					local n = (#n);
					while (((((not ...) > ...) <= (not ...)) > ((-(#(not n)))._() % (-n)._)) >= ((-(#(not ...)))() - ((#(not ...))() / (not ...)._))) do
					end;
				end;
				if (((-...) >= ((not ...)._ / (-(#(not ...))))) and (((((-(((not (-(#(not ...)))._()) > (-(#(not ...)))()) or ((-(#(not ...))) ^ (-...)()))) < (-(#(not ...)))) < (#(not ...))._()) <= (-(not n))._()) > ((-(not ...))._ + ((...)._ % (#(not n))._())))) then
					local function n(...)
					end;
					local function n(...)
					end;
					for n = ((((((-function(n, n, n, n, n, ...)
						return (#(not ...))._, (-(not ...)), (-(not ...))._, (-(not ...));
					end)() >= ((-(#{(-(#...))._()}))() / (#...)())) > (n - (-...)._())) <= (-...)._()) <= (-(#(not ...)))._) > (#...)._()), ({(not ...), (-(#...))._(), (#(not ...))(), (-(not ...))}._() and ((((#...)._ > (not ...)._) >= ((((not ...)._() ^ n._) / (...)()) % (-(#(not n)))())) == (not ...)._)), (((-(#(not ...)))._ - n) or ((-(#...)) - ((((#...)._() * (-(not n))) * ((not ...)._ ^ (...)())) / (-(#(not ...)))()))) do
					end;
					while ((((((#(((not (not ...)()) > (#...)) < ((not ...)._() ^ (not ...)())))._ <= (#n)._()) >= ((...)() * (...)())) == (not ...)._()) > (not ...)._) or ((-(not ...))._ > (not ...)._())) do
					end;
					while ((((-{(-...)._(), [(-(#(not n)))] = (-(#...))._, [(not ...)._] = (...)()})() % (-(not ...))._) or (((#n)() * (-...)()) >= (-(#(not ...)))())) or (((...)() * (-(#...))._) <= (...)())) do
					end;
					for n = (((((((-(not ...))._() / (#(not ...))._) / (-(#...))._()) % ...) % (#...)()) * (-(not n))()) >= ((-...)._ - (not ...)._())), ((#...)() or (((((#...)._() >= (-(#(not n)))) <= ((...)._ / (...)._())) < (#(not ...))) <= ((-(#(not ...))) ^ (not ...)()))), ((((((#(not ...))._ - ((-(not ...))() * (#(not ...))._)) - (-(not ...))._()) < (#...)()) < ((-(#(not ...))) / n._())) or (#(not ...))._) do
					end;
					if ((((-(#...))() < (-...)) == (((((-(#...)) / (#...)) * (#...)) * ...) * (-...)._())) and (not ...)._()) then
					end;
					while ((((((-(#(not ...))) % (#(not ...))._) % (-...)._) / (not ...)._()) * (-(not n))._) - (((#n)._() % (#...)) / ...)) do
					end;
				end;
				local n = ...;
			end;
		end;
	end;
	local function E(d, n, o)
		if o then
			local n = ((d / (e ^ (n - t))) % (((#{((#{}) + 815), [359] = 0x2A5, 589}) + 0x000) ^ (((o - t) - (n - t)) + 1)));
			return (n - (n % t));
		else
			local n = (e ^ (n - t));
			return ((((d % (n + n)) >= n) and t) or 0x000);
		end;
	end;
	local K = ("" .. n[(-Hn)]);
	local function T(...)
		return {...}, H(K, ...);
	end;
	for n = 1, 0x000, 0x001 do
		local function o(...)
			if ((((#...)() and ((#(not {[(not ...)] = (#function(o, o, o, o, o, n, ...)
				return (#(not ...))._(), (-(#(not ...)))(), (-...)._, (#n)._(), (-(not n))._, (-n), (...)._(), (#...)();
			end)()}))() * (not function(...)
				return (-(#(not ...)))._(), (-(#(not ...)))._;
			end)._)) and ((... > (#(not ...))._()) > ((-(not ...)) * (#...)()))) and ((((-...)() - (#(not ...))) < (#...)()) >= ((not ...)() ^ (#(not o))()))) then
				local function n(...)
					local n = (#...)._;
					local function n(...)
					end;
					if (((((not ...)() % (#(not ...))._) / ((...)._ ^ ...)) < (... - (#...)())) <= ((not ...)._() ^ ...)) then
					end;
					while (((-n)() ^ (-(#(not ...)))()) and (((#...)._() == ((((-...)() * (-(#...))._()) % (-(#...))()) - n)) == (-(#n))._)) do
					end;
					local function n(...)
					end;
					local n = (-(not ...))._;
					while (((((not ...)._ == (-...)._()) > (#...)) > ((((-(#...))() * (not ...)._()) / (#n)()) + (-...)._)) < (-(#...))._) do
					end;
					while (((#(not ...)) < (-(#(not function(n, n, n, n, ...)
						return (-(#(not ...)))._, (-(not ...))._(), (-(#(not ...)))(), (-(#(not ...)))._(), (-(not ...));
					end)))) and ((((((not ...)._ % (...)._) < (-...)()) == (-...)._) == (...)()) > n._)) do
					end;
				end;
				if ((((((#(not ...))._() < ((#n)() ^ (function(n, n, ...)
					return (-(#...))._, (-...)._, (#(not ...))(), (-(#...))._, (#(not ...))._(), (#(not ...));
				end)())) <= ((-n) / (#(not ...))._)) <= (((#(not ...))._() * (#(not ...))()) + ...)) < (-(#(not ...)))) < (-(#...))._()) then
					while (((#(not ...)) == ((not ...)._ / (#(not ...))._())) or (((((((-...)._() % (not n)._()) <= ((-(not ...)) + (not ...))) > (-(not ...))) <= (#n)._) <= (...)()) >= (#(not ...))._())) do
					end;
					for n = (((((-(not ...))._ + ((-(not ...)) / (not n)())) <= (((#(not ...))() - (#(not ...))) - (-(not ...))._)) < (-(#(not ...)))._()) > (-(#(not n)))._()), (((-(not ...))._() == function(n, n, n, n, n, n, n, ...)
						return (...)._, (...)();
					end._()) or ((((...)._() >= ((-(not ...))() * (-(not ...))())) >= (...)._) == ((-(#(not ...)))() * (-(not n))()))), (((-(#...))() >= (not ...)) > ((((#(not ...))._() + (#(not ...))) - ((#(not ...))() ^ (#(not ...))())) - ((-(#...)) % (not ...)()))) do
					end;
					local function n(...)
					end;
					while (((((-...)._ / function(o, o, o, o, o, o, n, ...)
						return (not ...)._, (-(#...))._(), (-(#n));
					end) < (#(not ...))._) < (((...)._ ^ (#...)) + (-...)._)) or ((-...)._() == (-(#n))())) do
					end;
					if (((((#(not ...))() == (#...)) <= (((not ...)._() * (-(#(not n)))()) % (-...))) and ((not n)() > (-(#(not ...))))) and (-(#...))._()) then
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					local function n(...)
					end;
				end;
				if (((((not ...)._() - (not ...)()) - (#...)._) <= (#...)._()) and (((((-(#(not ...))) >= ((#...)._ ^ (#(not ...)))) >= (-(#(not ...)))._()) < (...)._()) < (#...)._)) then
					if ((((((-(not ...))._() * (#(not ...))) % (not ...)._) >= (-(not ...))()) > (((...)() % (not n)._()) * (-(#(not ...)))._())) and (-(#(not ...)))) then
					end;
					if (((((-(not ...))._ >= (#(not ...))) <= (-(not ...))) <= (#(not n))()) and (((...)._() < ((-...)() / (...)._())) <= (-(#...)))) then
					end;
					for n = ((((#(not ...))._ > (-(#((not ((#...)() ^ (#(not ...)))) + ((-(#...))._() / (-(#...))()))))()) and (#...)) and ((((not ...)() >= (-...)) == (#(not ...))._()) == ((-(#(not ...)))() % (#...)._))), (((((#(not ...))._ / (#...)._()) - ((-(not ...))._() % (-(#(not ...))))) >= (-...)._) and (((#(not ...))() == (...)._) > (#(not ...)))), ((((((#((not (#(not ...))()) <= ((-(#...))() + ((-...)() % (#n)._))))._() * (((-(#...)) >= (...)._()) and ((-(#...))() <= (-(#...))()))._()) == (#...)._) > ((-(#...))() * (not n))) == ((not ...)._() + (not n)._())) < (-...)._()) do
					end;
					if ((-(#...))._() or (((not ...)._ < (-(#(not ...)))()) and (((((-(not ...))._ ^ (-...)._) == (...)._()) >= (-...)._()) >= (-(#(not ...)))()))) then
					end;
					for n = ((-(#...))() or (((((-(#...)) * (#(not ...))._) % (#(not ...))) + (#(not ...))()) and (((#(not ...))() % (-(#...))._) >= (-(#...))._()))), ((((((-n) / (-(#(not function(n, ...)
						return (...)._(), (-(#...))._, (-(not ...))._, (#...)(), (-(#...)), (...)._, (-(#...))._, (...)._, (#(not ...))._;
					end)))._()) / (-(#(not ...)))) <= (-(#(not n)))._()) < (#...)) > ((-(not ...))._() + ((-(#(not ...)))._() ^ (not ...)._()))), ((({[(-(#(not ...)))._] = (-...)._(), [(...)._] = ...} + (-(#(not ...)))) >= ((((-(not n))._() * ((not n)() ^ (-(#...))._)) * (#...)) - (-...)._)) or (-...)._) do
					end;
					if ((((-(#...)) / (-(#(not ...)))()) % (#...)) and (((#(not ...)) - (not ...)()) >= ((-n)._ - ((#(not ...)) * ...)))) then
					end;
					while (((((...)() ^ (#function(o, o, n, ...)
						return (#(not n))._, (not ...)._();
					end)._) < (-(not ...))._()) > ((-...)._() + (-(#...))._)) or ((-(not ...))._() <= ((-(not ...))() ^ (-(#...))._()))) do
					end;
					for n = ((((((not n)._() + (#...)._) == ((#...)() % (...)._())) > (#...)()) == (-(not ...))._) <= ((not ...)() + (-(#...))())), (((((((-function(o, o, o, o, o, o, o, n, ...)
						return (-n)();
					end)() / (-(not ...))._()) > (-(not ...))()) <= ((#(not ...))._ - (#(not ...))._())) >= (#(not ...))._()) > n) >= (...)()), (((not ...)._ <= (-(#(not ...)))) and ((((not ...)._ / (-(#...))._()) + ((#(not ...))._ * (-(not ...))._())) <= ((#...) * (-(#...))._()))) do
					end;
				end;
				local function n(...)
					while ((...)() and ((((((...)() % (-n)()) >= (-n)._()) < (-(not ...))) == ((-...)() - (-(#...))._())) > (-(not ...)))) do
					end;
					while ((({(-(#...))._, (-(#(not ...)))} >= (#...)()) >= (#...)._()) or (((#...)() < (#(not n))()) and ((#...) <= ((-(not ...))._() % (not n)._)))) do
					end;
					local n = (-...);
					local function n(...)
					end;
					local n = (-(#(((not (#(not ...))._) >= (-...)._()) >= ((((#n)() % (-(#...))._()) / (-(not ...))) + (-(#(not ...)))._))))._();
					while ((((not ...)() == (not n)()) and ((#(not ...))._ == (((#...)() - (-(#(not ...)))()) - (#...)._()))) or ((-...)._() + (#...)._)) do
					end;
					while (((((((not function(n, n, n, n, n, n, n, n, n, ...)
						return (-...)(), (#...)._(), (-(#(not ...)))._(), (-(#(not ...))), (#(not ...))(), (-(#...))._, (#...)._(), (-(#(not ...))), (-(#...))._();
					end)._() >= ((((-(#(-(#(not ...))))) + (-...)()) >= (#...)._) and (#(not ...)))._()) < (#(not ...))()) > (-...)) > (-...)()) > ((-n)._ + (#...)._())) < (-(not ...))()) do
					end;
					local n = (not ...);
				end;
				if (((((((-(not function(o, o, o, o, o, o, n, ...)
					return (not ...)(), (-(#n)), (...)._, (-(#(not ...)))._, (-(#...))._, (not ...)(), (not ...);
				end))._() * (-(#(not ...)))._) == ...) <= ((-(not n))._() ^ (-(not ...)))) <= (-(#(not ...)))()) == n) < ((-(not ...))._() / ((not ...)() ^ (-(not ...))))) then
					local function n(...)
					end;
					if (((#(not ...))._() % (#...)()) and (((-(#(not ...)))() > (-(#(not ...)))._) >= ((((-(#(not ...)))._ % (-(not ...))()) + (-(#(not n)))._) + (-(#...))))) then
					end;
					for n = (((#(not ...)) >= (((((((not (#...)()) * (-(#...))._()) < (not ...)()) < (-...)())() * (...)._()) + (-...)()) - (-(#...))())) or (((not ...)._() == (-...)()) and ...)), (((((#(not n))() ^ (#...)()) + (not ...)()) >= ...) and ((-(#...)) < (((-(#(not ...)))._ * (not ...)()) * (#(not ...))()))), ((((((((-(-(not n))) - (#(not ...))._) >= ...) or (#...))._() * (-(not ...))._()) < ((not ...)() * ((not ...) ^ (#(not ...))()))) <= (-...)._) >= ((-...)._() / (#...)._())) do
					end;
					local n = (-...)._();
					local function n(...)
					end;
					local function n(...)
					end;
					for n = ((((not n)() ^ (-(not function(n, n, n, n, n, n, n, ...)
						return;
					end))()) / (-(#(not ...)))()) or (((#(not ...))._() ^ (#(not ...))._()) - (((-(not ...))._() * (-(#(not ...)))._) / (not ...)()))), ((((not ...) + (#...)._()) <= (... % (#n)())) or (((-(#...))._() ^ (-(#...))) <= ((-(#...)) - (...)._()))), ((((((-(#(not ...)))._() / ((-(#...))() ^ (-...)())) / ...) == (-(#(not ...)))) > (...)._) and ((...)() > (-...)())) do
					end;
					for n = ((({[((...)._())] = (...)._(), (#(not ...))()}._() > (not ...)()) and ((#(not ...))._() > (-(#...))._())) or (((-(#(not ...)))._ % (...)._()) + ((...)._ % (#(not ...))._))), (((((#(#...)) or (((#...)() ^ (...)._()) == (-(#(not n)))._))._ <= (((-(#(not ...))) ^ (-(#...))) - (((...)._ / (-(#...))._()) / (-(#...))()))) == (...)._()) > (-...)._()), ((n() >= ((-(#(not ...)))._ * (-(#(not ...)))())) or ((((-...)._() ^ (not n)()) - (not ...)._()) <= ((not ...) ^ (#...)))) do
					end;
				end;
				while ((((-(#n)) * (...)()) % (#...)()) and ((((-(#...))() >= (#...)()) == ((-(#(not ...)))() / (-...)._())) > (((...)() / (-(#...))._()) * (not ...)()))) do
					while ((((-(not {(-(#...))._(), [(-(#(not ...)))] = ..., (-...)._}))._() <= ((((#(#...)._()) and ((#(not ...)) + ((-(not ...)) * (#...)._())))() + ((-(not ...))._ % (#(not ...))._())) + ((-n)._() / (-(#(not ...)))()))) >= (not ...)()) or (#...)) do
					end;
					if ((((((-(#{(-(#n)), (-(#(not ...))), [((-(not ...))._())] = (-(not ...)), (#...)._()}))._() < (not ...)._) < (-(#...))()) == ((-n)() * (#(not ...))._())) < (...)._()) or ((-(#(not ...)))._ > (-...)._())) then
					end;
					while ((((-(not {(-(#...))._, (-...)._})) < ((((-(#((#...)._() ^ (...)._()))) > ((...)() + (-(not ...))()))._ / (#(not ...))._()) / ((#...)() ^ (...)._))) == ((not ...)._ % (#...)._)) > (...)._) do
					end;
					while (((((...)._() >= (...)()) and (((-...)() - (-...)._) == (...)._)) or ((-(#(not ...)))._() / (not ...)._)) or (-(#...))) do
					end;
					while (((((-(#...))() <= (-(#n))()) < ((-(#...))() / (#(not ...)))) and (((-...)._() ^ (-(not ...))._()) <= (-(not ...)))) and (not ...)._()) do
					end;
					local n = (-(#(not function(n, n, n, ...)
						return (#(not ...)), (#(not ...)), (not ...)._;
					end)))();
					local function n(...)
					end;
					local n = (-(((not (#...)._) or (#...)()) or (((#...)._ + ((not ...) / ...)) <= (...)._)));
				end;
				local function n(...)
					while (((((...)() * (((-(n._ ^ (-(#...))._)) % (-(not ...))._()) > (-(not ...)))._()) <= (not ...)._()) == (-(#n))._) or (((-(not ...))._() / (not ...)()) == (#((not ...) ^ (-(#(not n)))._)))) do
					end;
					while (((((#(not function(n, n, ...)
						return;
					end))._() == ((#...)._() ^ (-(#...))._)) < (-(#...))) <= (#(not ...))._) or (((...)() * (#...)()) > (#...)._)) do
					end;
					local n = (-(not ...));
					for n = ((((-(not ...))._ <= ((#{(not ...)})._ + (not n)._)) == ((... / (#...)()) * (#...))) or ((#(not ...))() / (-(#(not ...)))())), (((((-(not ...))._() % (#n)._) > (#n)()) and (((-(not ...))._() / (-(not ...))) > ((-(not ...))() ^ (-(#(not ...)))))) or (not ...)), (((#(not ...))._ >= (((not ...) ^ ((...)() ^ ((-(not ...))() ^ (...)()))) + (-(not ...))._)) == (n() / (#(not ...)))) do
					end;
					for n = ((((((#...)._ ^ (not ...)._()) * (-(#(not ...)))) - (-(not ...))._()) + (((...)._() % (-...)._()) / (-...)._())) + (-(#(not ...)))._), (((((-...) >= (-(#(not ...)))()) <= ((-(#...))._() % (-(#(not ...)))())) >= (not ...)) >= (((-(#(not ...)))() / (not ...)) - (...)._())), ((((-(#(not ...)))._() > (not ...)._) <= ((-...) + ((#(not ...))() ^ (-(#...))._))) and (((#(not ...))._ / (-(#(not ...)))()) - (not ...)._)) do
					end;
					for n = ((((-...)() + (-(#...))) and (... - (-(#...))())) and ((#(not n))() <= (((-(not ...)) * (#(not ...))()) * (not ...)._()))), ((((((#(not ...)) / (not ...)) * (#(not ...))._()) >= (#(not ...))) and ((-...)._() > ((...)._() - (-(#(not ...)))))) and (-...)._()), (((((#...)._() <= (((-(#...))._() % ((-(not ...))._ ^ (-(not ...))())) / ...)) <= (#(not ...))._) == (...)._) > (-n)._) do
					end;
					while ((((#(((not ...) * ((-...) ^ (-...)._)) > (-(#...))._))._() <= ((((-(#...))._() + (#(not ...))) + (not ...)()) + (-(#(not ...)))._)) < ((...)() - (#(not ...)))) or (not ...)()) do
					end;
					if (((((#(not ...))() + (-(not ...))._()) + ((((#(not ...))() / (#...)._) * (-(#...))()) / (-(#...))._())) < (-(#(not ...)))) >= (...)._) then
					end;
				end;
				local n = (-(#...))._();
				for n = ((((((-(#(not ...))) / (...)._()) % (-(not ...))._) == (not function(n, n, n, n, n, n, ...)
					return (not ...)._(), (...)._, (...)._, (-(not ...))._, (-(not ...))(), (...)._(), (-(#(not ...)))(), (-...)();
				end)()) > ((-(not ...)) % ((-...) ^ (-(not ...))._))) and (((#...)._ - (-(not ...))) >= (...)())), (((((((((#(-(#...))._()) > (((not ...)._ / (-(not ...))._) % (...)._())) or ((-(#...)) % (...)._))._() / (-(#function(n, n, n, n, n, n, n, n, n, ...)
					return (-...), (...)(), (not ...)(), (#(not ...))._(), (-(not ...))._, (not ...)(), (-(#(not ...)))._(), (#...)._(), (-(#(not ...)))._;
				end))._) + ((#...)() * (#(not n))())) - (not ...)()) + (-(#n))) < (((-(not ...))._ / (...)._) / (-(not ...))())) == (-(not n))._), ((((#...)() == (-(not {}))._()) and ((((-(#(not function(n, n, n, n, n, n, n, ...)
					return (not ...)(), (-(#(not ...)))._(), (-(not ...))(), (#(not ...));
				end)))._() - (-(#...))) + (-(#...))()) < ...)) or (((-(#...)) >= ((...)() * (not ...)())) > (#...)._())) do
					for n = ((...)._ or ((((#...)._() ^ (-(#...))) >= (-(#...))._) and (((...)._() + (-(#(not ...)))) >= ((-(not ...))() + (-(#...))._())))), (((... % (-(#(not ...)))._()) or ((#...)._ <= (((#(not ...)) + (-(#...))) - (...)()))) or ((-...)._() == (-(#...))._)), ((((((-(not ...)) >= (-...)._()) >= (-(#(not ...)))._) <= ((-(not ...)) - (-(not ...)))) < (#...)()) and ((-(not ...))._() + (-(not ...))())) do
					end;
					if ((((#(not n))._ / (-(#(not ...)))) % (not ...)()) < ((((-(#(not ...)))() / ((#...)._() ^ (not ...)._())) / (-(not ...))._()) - (#(not ...))())) then
					end;
					while ((((-(#{[(-(not ...))] = (-(#(not ...)))._(), (-...)._, (-(#(not ...)))._()}))() ^ n._()) + (#(... ^ (#n)))) >= ((((-...)() ^ (not ...)._()) * (...)()) * (-(not ...))._())) do
					end;
					local function n(...)
					end;
					for n = (((((-(#(not ...)))() <= (#(not {[((-(#...))())] = (-(#(not ...)))(), [(#n)._] = (#...)._, [(-(#...))] = (not ...)(), [((#(not ...))._())] = (-(#(not ...)))._, (-(not ...))()}))) == (-(not ...))._()) < (not ...)) and ((((...)._ * (-(not ...))._()) == (...)._) < (-(not ...)))), (((((((-((((not (-(#(not ...)))()) * (-(#(not ...)))._()) < (-(#...))._()) and (#...)._()))._() % (#...)) - (#...)._) <= (-(not ...))._) < ((...)() ^ (-(#...)))) <= (-...)._) or (-(not ...))._()), (((not function(o, o, o, o, o, o, o, n, ...)
						return (-n), (...)(), (...)(), (#(not ...))._;
					end) >= (((((not ...)._ * (#((not ...) ^ (-(not n))._))) % (#(not ...))._()) / (-(not ...))) - (#(not ...))._())) and (#(not ...))._()) do
					end;
					if ((((-(#(not function(o, o, n, ...)
						return (-(not n))._(), (#(not ...))._();
					end)))._ + (-(#(not ...)))._()) >= (((-(#(not ...)))() * ((-(#...))() ^ (-...)())) * (-(not ...))._())) <= ((-...)._ - (not ...)())) then
					end;
					for n = ((((((...)._ - (#...)()) < (((not ...)._ * (#...)._) + (...)())) > (-(#(not ...)))()) <= (not n)) > (#...)._()), (((-(#(not ...))) or (#...)()) or ((((-(#...))._ / (...)._()) < ((-(#(not ...)))._ + ((#n)() ^ (-(#...))._()))) == (-...))), (((((-(#{(not ...)._()}))() ^ (-...)) > (-(#(not ...)))()) > ((((-(#...))() + (-(#...))._()) + (-(#...))._()) + (-(not ...))())) == (-(#(not ...)))()) do
					end;
					for n = ((...)._ or ((((#...)._() >= (((-(#(not ...))) ^ (#...)._()) - ((not ...)._() * (not ...)._))) == ((-(#...))._ ^ (-...))) and ((#(not ...))._ == ((not ...)._ + (-(not ...))._)))), (((((-(#...))() + ((-(not ...))._ ^ (not ...)._)) - (#(not ...))) >= (#(not ...))()) == (((#...)() / (-(#(not ...)))) - (not ...)._)), ((((((-(#(not {n(), [(-(not n))._] = (#...)()})))._ == ((-(not ...))._() + ((#(not ...))() % (#(not ...))()))) >= (-(#(not ...)))._()) >= (not ...)._()) <= (-(#n))()) and (-...)()) do
					end;
				end;
			end;
		end;
	end;
	local function V(...)
		local i = {};
		local G = {};
		local N = {};
		local F, s, w, n = a(r, o, (o + u));
		F = l(F, d);
		s = l(s, d);
		w = l(w, d);
		n = l(n, d);
		o = (o + A);
		local n = ((((n * h) + (w * B)) + (s * c)) + F);
		for n = x, (n - t), 0x001 do
			local F = R();
			if (F == Z) then
				local d = l(a(r, o, o), d);
				o = (o + t);
				local o = d;
				local o = o;
				i[n] = (o ~= x);
			elseif (F == In) then
				while true do
					local r, a, u, f = a(r, o, (o + u));
					r = l(r, d);
					a = l(a, d);
					u = l(u, d);
					f = l(f, d);
					o = (o + A);
					local o = ((((f * h) + (u * B)) + (a * c)) + r);
					local o = o;
					local d = C();
					local a = t;
					local l = ((E(d, t, 20) * (e ^ 32)) + o);
					local o = E(d, Wn, ((#{[0x11D] = 0x1D8, 115, 799}) + 29));
					local d = ((-t) ^ E(d, Nn));
					if (o == x) then
						if (l == x) then
							i[n] = (d * x);
							break;
						else
							o = t;
							a = x;
						end;
					elseif (o == Gn) then
						i[n] = (((l == x) and (d * (t / 0))) or (d * (x / 0x000)));
						break;
					end;
					i[n] = (g(d, (o - Vn)) * (a + (l / (e ^ 0x034))));
					break;
				end;
			elseif (F == Un) then
				while true do
					local e = '';
					local E, C, u, F = a(r, o, (o + u));
					E = l(E, d);
					C = l(C, d);
					u = l(u, d);
					F = l(F, d);
					o = (o + A);
					local c = ((((F * h) + (u * B)) + (C * c)) + E);
					local c = c;
					if (c == x) then
						i[n] = e;
						break;
					end;
					local x = f(r, o, ((o + c) - t));
					o = (o + c);
					for n = t, (#x), t do
						e = (e .. D[l(a(f(x, n, n)), d)]);
					end;
					i[n] = e;
					break;
				end;
			else
				i[n] = nil;
			end;
		end;
		for n = x, (C() - t), ((#{0x002, [930] = ((#{}) + 0x273), ((#{}) + 536), [519] = ((#{}) + 0x181), ((#{0x34F}) + 792), ((#{[0x32F] = 4, 0x331, 573, 739, [0x288] = 0x28C, 0x188}) + 0x26A)}) - 0x003) do
			N[n] = V();
		end;
		for w = t, C(), t do
			local D = Y();
			if (E(D, t, 1) == x) then
				local F = (C());
				local i, f, x, n = a(r, o, (o + u));
				i = l(i, d);
				f = l(f, d);
				x = l(x, d);
				n = l(n, d);
				o = (o + A);
				local n = ((((n * h) + (x * B)) + (f * c)) + i);
				local C = n;
				local f, x, n, i = a(r, o, (o + u));
				f = l(f, d);
				x = l(x, d);
				n = l(n, d);
				i = l(i, d);
				o = (o + A);
				local n = ((((i * h) + (n * B)) + (x * c)) + f);
				local x = n;
				local n, a = a(r, o, (o + e));
				n = l(n, d);
				a = l(a, d);
				o = (o + e);
				local n = ((a * c) + n);
				local l = n;
				local d = E(D, e, 0x003);
				while false do
					local function n(...)
						for n = (((((((#function(o, o, n, ...)
							return (-(#(not ...)))(), (#...)._, (-(#(not n)))._(), (not ...)._(), {(not ...), (#...)._, [((#(not ...))())] = (-(not ...)), (...)._()}._(), (#(not ...))._(), (#function(o, o, o, o, n, ...)
								return (#...)(), (#n)._();
							end)._();
						end)._() > (-(not {[(not ...)] = (#...)._, [(#(not ...))] = (-(not ...))(), (-(#(not function(n, n, ...)
							return (#(not ...))._, (-(#...))(), (not ...), (not ...);
						end))), (-(#{(#...)._, [(not n)._] = (#(not ...)), (-(#(not ...)))._(), ..., [((#...)())] = (not ...)()}))}))._) >= (-...)) >= (-(not ...))._()) >= ((-(#...))._() * (...)._)) > (((((-...)() % (-(#...))._) * (-(#(not ...)))._()) + (-n)) - (#(not ...))())) == (-(not ...))()), (((((-(not ...))() <= (-(not n))()) <= ((-(#(not ...)))._() % (-(#...))._())) >= ((#((not (-(#...))()) - (... / ((not n)() ^ (...)())))) - (-(#(not ...)))._)) or (((((-...)._() / (...)._()) - (#(not ...))()) >= ((-(#(not ...))) ^ (-(not n))._())) and (-(not n)))), (((((-(not n))._ >= ((((-...)._ / (((-(not ...))._() >= ((((-(not ...))() ^ (-(not ...))._()) % (-...)()) / (#...)())) < (-(#(not ...)))._)._()) - (-...)) + (-(not ...)))) > ((((-(#...))._() * (#(not n))._()) * (-(not ...))()) / (-(#...))._())) and (-(#(not ...)))) or (n() >= (not ...))) do
							while (((-(((((not (not ...)._()) + (#(not ...))._()) + (#...)) + ((#(not ...))._() / (#...)())) and (#...)()))._ * (-(#...))._()) or (((((-(not ...))._ <= ((#...)() - (#(not ...))._())) <= ...) >= (-(#(not ...)))()) == ((-(not ...))._() - ((#(not ...))() / (-(#...))())))) do
								local function n(...)
								end;
								for n = (((((((not ...)._ - function(n, n, n, n, n, n, ...)
									return (#...), (-(not ...))(), (-(#...))._, (#...)._;
								end._()) <= (-(not n))()) > (not ...)()) == (#...)._()) == (-(not ...))._()) or ((-(#(not ...))) > (-(#n))())), ((((n._ + (-...)._) >= ...) <= (((-(not ...)) + (-...)._) - (#(not ...)))) or ((not ...)._() - (-(#...))._)), ((((#...) > ((...)() ^ (-...)._())) or n._()) or (((#(not ...))() == ((-(not ...))._ + (#(not ...))._)) and (-(#(not ...)))())) do
								end;
								if ((((((#(not ...))._ * (...)._) < (((#(not ...))() ^ n()) / (-(not ...))._())) and (-(not ...))) and (...)._()) or (#(not n))._()) then
								end;
								local n = (#(not n))();
								for n = (((((((not ...)._ % (#...)()) / (-(#...))) > (...)._()) >= (not ...)._) or ((-n)._ and (#...)._)) or (-(#...))._), ((function(n, n, ...)
									return (-...)._(), (-(not ...))(), ..., (-(#...))(), (not ...)._(), (-(#...))._(), (-...)._;
								end._ - ((((not ...)._ * (#(not n))._) * (-(not ...))()) % (...)())) and (((#...)._ == (#(not ...))._) > n._())), ((-(#...)) or (((((#(not {(not ...)._(), (#...)(), (#n)._()})) > ((-...) + (-...)._)) <= ((-(not ...)) % (-(#...))._)) >= (-(#(not ...)))._()) > (not ...)())) do
								end;
								for n = ((((not ...)() == ((#(not n))._() * (-...)._())) >= (#...)) or (((#(not ...))._ / ...) and ((-(#(not ...)))._ > (-(#...))._()))), ((((((not function(o, o, o, o, o, o, n, ...)
									return (-(#...))._, (-(not ...))._, (#n)._, (-...)(), (#...)._;
								end) * (not ...)()) * (-...)._()) < (-(not n))) >= (#...)()) and (((#...) + (...)()) <= (-(#n))._)), ((((((#(not ...))() ^ (-...)._()) + (-(#(not ...)))._()) > (-(#...))._()) < (((-(not n))() % (-(#...))()) + (-(#(not ...))))) or (-(#(not ...)))._()) do
								end;
								while (((((...)._() >= ((#(not function(n, ...)
									return (#...)._, ..., (-(not ...)), (-(#(not ...)))(), (#...)._, (#n);
								end)) / (not ...)._())) < (-(#(not ...)))._) < ((#...)._() ^ (not ...)())) < ((-(#(not ...))) - (-(not ...))._())) do
								end;
								local function n(...)
								end;
							end;
							local function o(...)
								if (((o._ > ((#(not ...))._ % (-(#(not ...)))())) < (-...)) or (((-(not ...))._ <= (#...)._()) < ((not ...)._() + (#(not ...))._))) then
								end;
								local function n(...)
								end;
								local function n(...)
								end;
								local n = (#(not ...));
								while ((((#(not ...))._ ^ ((#(not ...))._ ^ (-...)._())) <= ((((-(#...))() ^ (-(#(not n)))()) % (#...)) / (...)._)) == (-(#(not ...)))) do
								end;
								if ((((...)._() * ((((not n._) / (#(not ...))) > (#...)()) or (-...)._)._()) > ((((-(not ...))() + (-(not ...))._()) + ((#(not ...))._ ^ (...)._)) + (#...)._)) and ...) then
								end;
								while (((((-(#...))._ / (#(not ...))()) - (#(not ...))._) and ((((#...)._() * (-...)()) * (-(#...))()) % (-(#...))._())) or (#...)._) do
								end;
								while ((-(#(not ...)))._ and (((((((((-(#(-(#n))())) >= (-...)()) and ((not ...)() <= (-(#(not ...)))._()))._ % (not ...)()) / ...) / (#(not ...))._) < (#(not ...))._) < (-(#(not ...)))._()) < ...)) do
								end;
							end;
							local n = (#{[((-o)._())] = (#((not (-(not ...))()) < (((...)._() ^ (not ...)) % (-(not ...))._())))._});
							for n = (((-(not ...)) / ((#(not ...))._() ^ (not ...)())) and ((((((-(#...))._ + (not ...)) >= (#...)()) < (#((not ...) ^ (not ...)._()))) <= (#...)._) == (-(#(not ...))))), (((((-...)._() >= (not ...)._) <= ((not n)._() / (not ...)())) or ((((#(not ...))._() * (-(not ...))._()) % (-(#...))._) >= ((...)._ + (#(not ...))._))) or (...)()), ((((((((-...)._ * (...)._()) - (not n)()) == (-(#{(not ...)(), (-...)._}))._) == (#(not ...))()) == ...) > ((-(not ...)) / (not ...)._())) or ((not ...)._ ^ n._())) do
								while (((((...)() <= ((-...)() * (-(#...)))) >= ((#(not ...))() + ((#(not ...)) % (-(not ...))._))) == (#...)._()) > (-...)()) do
								end;
								while ((((((... * (-(#(not {[((-(not n))())] = (...)._, [((-(#...))())] = (...)()})))) % ...) < ((-(#...)) / (-(#...))._)) == (#(not ...))()) > (#...)) and (-(not ...))._()) do
								end;
								local function n(...)
								end;
								for n = (((((-(#((((not (-(#...))()) - (-(not ...))._) + (-(#...))) and (#...)._())))._ > (...)._()) < (-(not ...))._) > ((#...)() + (#...))) >= ((not n)._ + ((-(#(not ...)))() % (-(#...))))), ((((-(#{[((...)())] = (#n)._, (-(#...)), (-(#...))._(), [((#...)._())] = (#...)(), ...}))() > ((((#(not {(-(#(not n))), [(-...)._] = (not n)._()}))._ % (-(#...))) - (not ...)) + (n._ ^ (-n)()))) < (-(#(not ...)))._) < (-(#(not ...)))._()), ((((((#(not {(-(#(not ...)))(), [((-...)._())] = (-(not ...)), [(-...)] = (-(#(not ...)))._}))() + (#...)._) > ((not ...)._() - (-(not ...))._())) == (#...)._()) >= (...)._) and ((#...)() / (-(not n))._)) do
								end;
								if (((#(not {(-(#(not ...)))(), [(...)._] = (...)._()}))._ + (-(#n))()) or ((((#(not n))() ^ (not ...)) >= (((not ...)._ / (#...)._()) + (#(not ...))._())) and (-(#(not ...)))._())) then
								end;
								local n = (-...)();
								if (((#(not ...))._() or ((-(not ...)) + (#((not ...) ^ (not ...)())))) or ((((-(#(not ...)))._() >= (not ...)._) <= (...)._) < ...)) then
								end;
								for n = ((((#(... ^ (#...))) < (((#...)._ % (not n)._()) * (-(#(not ...)))._())) >= ((...)() ^ (-(#(not ...)))._())) and (-...)()), (((-...)._() and (-(not ...))) and ((((-(not ...)) > ((-(not ...)) ^ (-(not ...))._)) < ((-...)._ - (-(#(not ...)))())) > (-(not n))._)), ((((((-(not ...))._ - ((#...)._ / (...)._())) + (#(not ...))) - ...) + (-(not ...))) == ((#...)._() / (-(not n)))) do
								end;
							end;
							if ((((((((not (not ...)()) or (#...)._) or (((... % (#(not ...))()) == (-(not ...))()) > (...)._))() * ((-(#(not ...))) ^ (-(not ...))._)) / (-(#...))) and (((not ...)._() / (not ...)._) / (-(not ...))())) or ((-(not ...)) == (-(not ...)))) or (-...)) then
								for n = ((-(#(not ...))) or ((((-(not ...))._() ^ (#...)) and ((-(#...))() >= (-(#(not ...)))())) and (((#n)() / (not ...)._) <= (-(not ...))._()))), ((((((-(not n))._() % (#...)._) + ((#...)() ^ (-(not ...))._())) <= ((#...)._() ^ (#(not ...))._)) <= (-...)._) >= (not ...)._), ((((((-(#...))._() / ((#(not ...))() ^ (...)())) - (-(#...))._) <= (-(#...))._()) < ((#(not ...))() ^ (#(not n))._())) and (#(not ...))()) do
								end;
								while ((((((not ...)._() - (#...)()) <= ((#...)() + (#...)._)) < (-(#...))._()) and (-(#...))._) or ((-(#(not ...)))._() ^ (-(#(not ...)))())) do
								end;
								if (((not ...)() % (#(not ...))._()) and ((((((-(#...))() / (-(#(not ...)))._()) > (not ...)) >= (#...)._()) >= (#(not ...))._) >= (-(not n)))) then
								end;
								for n = (((((-(#function(...)
									return;
								end))._() <= (#...)) < (-(#(not ...)))) > (#(not ...))._()) or (((-...)() + ((#...)() ^ (...)._)) + (not ...)())), (((((-...) / (-(#...))) < (not ...)._()) and ((not ...)._ % (-(#(not ...)))())) and ((not ...)._() - ((-(#(not ...)))() * (-(not ...))._))), ((((((#function(o, o, o, o, o, o, n, ...)
									return (-...), (-(#(not ...))), (...)._(), n._(), (-(#(not ...)))._(), (-...), (-(#...))();
								end)._ + (#(not {}))()) + n()) + (-(#(not ...)))._()) > (not ...)()) or ((...)._() <= ((-...) ^ (...)._()))) do
								end;
								if (((((-(#(not ...)))() ^ (#(not ...))._()) % ((-(#...))() ^ (... ^ (-...)._()))) / (not ...)) or ((...)._ + (#...))) then
								end;
								local n = (-(#(not ...)))._();
								local function n(...)
								end;
								local n = (#(not function(n, n, ...)
									return (-...);
								end));
							end;
							for n = (((-(not ...))._ and ((((#((not ...) ^ ((not (-(not ...))) and ((...)._ == ((-...) % (not ...))))._)) % (...)._) % (-(not ...))()) + (not ...))) or ((((not ...) > (-(#...))._()) > (...)._) == (not ...))), (((...)() ^ (-(not ...))()) or (((((-(#(not ...))) > (((-(not function(n, ...)
								return (-(#...))._;
							end)) * (not ...)) + (not ...)._)) < (not ...)) <= ((-(#...)) % (-n))) == (-(#(not ...))))), ((((((-(not function(n, n, ...)
								return (-(#...))._(), (-(not ...))(), (-...)._, (-...), (#(not ...));
							end)) <= (((not {})._ ^ (-(#...))._) % (#(not ...)))) == ((#(not ...))._ + (-...)._)) or ((#...)._ == (#(not ...)))) or (-(#...))._()) or (-(#n))._()) do
								local n = (-(#(not ...)))._();
								local function n(...)
								end;
								if (((((-(not {[((-...)._())] = (-(#(not ...)))(), [(-...)] = (-(#...))()}))._ < (#(((not (-(not ...))._) + (-(#(not ...)))._()) == ((#(not ...))._ - (#(not ...))._())))._()) > (-(#...))) > (-(not ...))._) <= ((not ...)._ - ((-(not n))._() / ((-(#...))._ ^ (-(not ...))._)))) then
								end;
								local n = (-(#(not ...)))._;
								local function n(...)
								end;
								for n = (((-(#(not ...)))() + ((not ...)._() % (not ...)())) or ((-(#(not ...)))() <= (((not ...)._ + ((#...)._ ^ (#(not ...))._)) + (#...)()))), ((((-(not ...))() > (-(#...))._) <= ((...)._ + ((-(#n)) * (not ...)._()))) or (((...)() > (-(#(not ...)))()) < (#...)._)), (((n._() ^ ((-(#...))._() ^ (-(not ...))())) + (not ...)._) and ((((-(#...))() - (-(not n))) + (-(#...))._()) == (-...)())) do
								end;
								if (((-function(...)
									return (-...)(), (#(not ...))._, (#...)._, (not ...)._, (-(#(not ...)));
								end)._() / ((...)._ ^ (-(#(not ...)))())) or (((((-(#...))._ % (-(#(not ...)))._()) % ...) - (#...)._) >= (-(not ...))._())) then
								end;
								local n = (-(#...))._();
							end;
							if ((((((-(not {[((-(#(not ...)))())] = (...)._(), [((...)._())] = (-(not n))._(), [((-(#(not ...)))())] = (-(#(not ...)))()})) - ((-(#n))._ / (#...)._)) - (-(#(((not (-(#(not ...)))) + (... % (not ...))) + (-...))))) > (-(not ...))._()) == ((#...)._() + (not ...)._)) and ((#(... ^ (-(#(not ...)))._)) % (#(not ...)))) then
								local function n(...)
								end;
								if ((((-(not function(o, o, o, n, ...)
									return (-(#...)), (...)(), (-...)._(), (-(not ...)), (-(not ...))._(), (not ...)(), (-(#(not n)))();
								end))._ >= (-{n()})._) > ((#...)._() * (-(#(not ...)))())) and ((((...)._ ^ (not n)) / (...)._()) == (not ...)())) then
								end;
								for n = ((((...)() / (#(not ...))._) - (n * (not ...))) + (((#(not ...))._() ^ (-(#(not ...)))._) % ((-...)() ^ (not ...)()))), (((((#(not ...))._() < (#...)._()) and ((#n)._ % n._)) and (#(not n))) and (((#(not ...))._() <= (not ...)._) <= (-(#(not ...)))._)), (((-(not {}))() * (-(#(((not (#n)._()) >= ((-(#...))() * (#(not ...)))) > (-...))))) or ((-(#...))._ and ((((-...)() <= ((-(#(not ...)))._() ^ (not ...)())) == (-(#(not ...)))._()) < (-(not ...))._()))) do
								end;
								local n = (-...)();
								local function n(...)
								end;
								while (((-(#(not {}))) < ((((-(#{[(#...)._] = (...)(), (not ...)(), (#...)()}))._() / (-(#...))._) * (#(not ...))) / (-(not ...))())) >= ((-(#...))() - ((-(#...))._() / (-(#...))._))) do
								end;
								local function n(...)
								end;
								if (((((function(n, n, n, n, n, n, ...)
									return (-...)._(), (-(not ...))._(), (not ...)(), (-(#(not ...)))._, (...)._();
								end._ == (-(#{(...)(), [((#...)())] = (not ...)(), (...)._(), [(-...)._] = (not ...), [(#...)] = (...)(), (-(#(not ...)))._()}))()) > (#...)) >= ...) > ...) == (((-...)._() / (#(not ...))._) + (-(not ...)))) then
								end;
							end;
							for n = (((((((not {(-(not ...))._, [(-(#(not ...)))] = (#(not ...))()})._() >= ((#(not ...))._ - (-(not n))._())) < (((not (-(#(not ...)))._) > (-(not ...))()) <= ((...)() - (-(#(not ...)))))._()) > (-n)) > ((-(#...)) / (-(#(not n))))) == (...)()) or ((#(not ...))._() ^ (#(not ...)))), (((((not ...)._ / (-(#...))._()) / (-(not n))) < (-...)) and ((((((#(not ...))._ < (-(not ...))()) <= (#...)._()) < (...)._) >= (#...)) < (not ...)._)), (((((((-(#(not ...))) - ((-(#...))._() / (-...)())) < ((#...)() - (#(not ...))._())) < (#...)) < ((-(not ...)) + (-...)())) and (-(#(not ...)))()) or (-...)()) do
								local function n(...)
								end;
								local n = (-(not ...))._();
								local function n(...)
								end;
								local n = (#(not ...));
								for n = ((((((-(#...))._ ^ (...)()) / (-(#(not ...)))._()) / (-(not ...))._()) or (-(#...))._) or ((...)._() and ((-...)._ < (-...)()))), ((#(not ...))._ and (((-(#(not ...)))._() == ((((-n)() % (...)._) % (-(not ...))._()) + ((-...)._() % (#...)()))) <= (#...)._)), (... or ((((((not ...)._ == (-(not ...))._) == (-(not ...))._) <= ((-...)() - (-(#(not ...)))())) <= (#...)._()) > (...)())) do
								end;
								for n = (((#((not ...) ^ (-(not ...))._)) <= ((-...)._ * (-(#...))._)) or (((-(#(not n)))._ >= ((#...) / (-(#...)))) == (...)())), (((#(not ...))._() - (-(#...))._) and (((-(not ...)) == ((not ...)._() % (#(not ...)))) < (((-(#(not ...)))._ % (...)._) + (-(#(not ...)))()))), ((((((#(not function(n, n, n, n, n, n, n, n, ...)
									return (-(#(not ...)))._();
								end)) + (#((not ...) ^ (-(#...))._))) + (not ...)._) - (-(not ...))) or (-...)()) or ((#(not ...))._ ^ (not ...)())) do
								end;
								local n = (#function(o, o, o, o, o, o, n, ...)
									return (#...)._, (#(not ...))._, (#n)(), (...)._, (#n)();
								end)._();
								if (((not ...) <= (-(not n))()) or (((-(not ...))._() % (-(not ...))()) + ((((-(#...))() / (-(#...))) % (...)._()) / (-(not ...))()))) then
								end;
							end;
							for n = (((-(#...))() and ((((#(not function(o, o, o, o, o, o, o, n, ...)
								return (-(not ...))(), (#...)._(), (-...)._, (-(#(not ...)))(), (not n)._(), (-(#...));
							end))._ <= (not ...)()) >= (((not {[(#(not ...))] = (-...)._, (#...)._(), (#...)._})._ ^ (#...)()) + ((not ...)._ ^ (-...)))) == ((-(#(not ...)))._() / (-(#...))._))) and (-(#...))._()), ((((...)._ < (((...)._ - (((-(not {(not n)._, [(...)] = (-(#(not ...)))._(), [(not ...)._] = (#(not ...))}))._ / (-...)()) % (#(not ...))._())) - (-(#(not ...)))())) >= (((-(#...))() + (#(not n))._()) + (-(#...)))) or (#n)()), (((((-(#(not ...)))._() - (-(#(not ...)))._()) - (#(not ...))._()) or (-...)) or (((n._ + ((not ...)() ^ (-(#(not ...)))._)) < ((-(not ...))._ % (not ...)._)) >= (-(#(not ...)))())) do
								local function n(...)
								end;
								local function n(...)
								end;
								local function n(...)
								end;
								while ((((-(#n))._ >= (-(#...))._) and (#...)._) or ((((#...)() + (-(#(not ...)))._()) + ((-(not ...))._ ^ (-...)())) < (not n)._())) do
								end;
								if (((((#(not ...))._ > ((-...)._() / (not ...)._())) >= (#...)()) < (-...)()) or (((#(not n))() ^ (#(not ...))._) / (-(#...))._)) then
								end;
								local n = (-(#(not ...)))._;
								local function n(...)
								end;
								if ((((-(#(not ...))) + (#...)._) - (#...)._()) or (((#...) > (#(not ...))._) >= (((not ...) * (not ...)) * (#(not ...))))) then
								end;
							end;
						end;
					end;
				end;
				if ((d == e) or (d == u)) then
					x = (x - (e ^ 16));
				end;
				G[(w - t)] = {[O] = C, [L] = l, [Q] = x, [W] = F};
			end;
		end;
		local n = Y();
		return {[P] = N, [U] = n, [b] = i, [I] = G, [M] = ((#{43, 0x351}) - 2)};
	end;
	while false do
		local function n(...)
			local n = (((not n) and ((({}._ - function(...)
				return (#n)._, (-(#(not ...)))._, (#...)._, (-(not ...))._();
			end._) + (-(not function(n, n, n, n, n, n, n, ...)
				return (#...), (not ...), (-(not ...)), (-(not ...))._(), (-...)._;
			end))()) < ((not ...)._ + ((-...)() % (-...))))) or ((((#(not ...))._() <= ((...)._ ^ (#...)._())) <= (#(not ...))._) > (-(not ...))._));
		end;
	end;
	local function N(n, A, B, ...)
		local V = n[P];
		local s = n[I];
		local c = n[b];
		local h = n[U];
		local u = n[M];
		return function(...)
			local i = (-t);
			local U = {};
			local C = {...};
			local F = (H(K, ...) - t);
			local E = {};
			local o = {};
			if (not true) then
				local function n(...)
					if ((((((-(#...)) % (not n)()) == (#(not ...))()) == (-(not ...))()) and ((-{[((-(#...))._())] = (not ...)._, (-(not ...))._, [(-...)] = (-(#...))._})() + (not ...))) and ((((#...) % (-(#(not ...)))._()) > ((-(#(not ...)))._ * (-...)())) < ((-(#...))() ^ (not ...)))) then
						local function n(...)
							if ((-(#{(...)(), (#(not ...)), (#(not ...))(), [(-...)] = (-...)._, [(not ...)._] = (-(#(not ...)))}))._() or ((not {[(-...)] = (-(#...))}) and ((((#(not ...))._() % ((-(#...))._ ^ (#(not ...))._)) == ((...)._ / (-(#...))())) == (#...)._))) then
							end;
							local n = (-(#(not n)));
							local n = (#(((not (...)._()) == (((-...) / (not ...)) / (#(not n))._)) and ((...)._ + (not ...)._)))._;
							local n = (#(not ...))._();
							if (((-(#...))._ < ((-(#(not ...)))() - ((#(not ...)) / (-...)._()))) or ((-(#...))._() and (((#(not ...))._ ^ (#...)._()) == (-(#...))))) then
							end;
							for n = (((((-...)._() == (-(not function(n, n, n, n, n, ...)
								return;
							end))) > (not ...)._) == (((...)._ ^ (not ...)._()) + ((not ...) % (#(not ...))._))) < (#n)), (((((... - (not ...)._()) < (-(not ...))._) and (not ...)._()) and (not ...)._) or (((-(not ...))._() % (-(#...))()) < (...)())), (((((((-((((not (#...)._()) > (#(not ...))._) > (-(#...))) > (not ...)._)) * (#((not (#(not ...))()) == (((-(#(not ...)))._() + (-(#...))._()) - (-(#(not ...)))._())))._()) / (-(not ...))._) % (#(not n))()) * (-...)._) + ((#(not ...))._() ^ ...)) + n()) do
							end;
							for n = ((not ...)._ or ((((((-{(-(not ...))._})._() - (#(not ...))._) + ((-...)() % (-...)._())) > (-(#...))._) < (-(#...))) < (-(not ...))._)), ((-(#...))._() <= (((((...)._() * (-(#(not ...)))()) - (-(#...))._()) + (-(not ...))._) + (((not ...)._ / (#...)._) % (#(not ...))()))), ((((#...) <= ((-(#(not ...)))._() + (#...)())) >= (#(not ...))()) or ((((#...)._ * (...)._) + (#...)) and (-(not ...))())) do
							end;
							for n = ((((not function(o, o, o, o, o, n, ...)
								return (#...)(), (-...), (-(#(not ...)))._(), (-(#...))._(), (-(not ...))._(), (not n)._(), (#...)._;
							end)() * (-(#(not ...)))) and ((-(not ...))() > (-...)._())) or (((... * (-(#(not ...)))) % (#(not ...))()) * (-(#...))._)), ((((((-...) * (-(not ...))) / (-(#(not ...)))._) <= ((#...) + (-(#...))._())) >= ((not ...)() / (-...)._())) < (#(not ...))), (((((-(#...))._ * (#{[((-...)())] = (#(not ...)), [((-n)())] = (-(#(not ...)))._, [(-(#...))._] = (#(not ...))._()})._()) > (not ...)()) <= (((-(not ...))._ % (...)._()) - (-(#(not ...)))._)) < ((not ...)._() / ...)) do
							end;
						end;
						if (((-(#(not ...)))._ and (-(not ...))) and (((((...)() % (-(#(not ...)))) > (((-(not ...))._() + (-(#(not ...)))._()) - ((...)._ % (-(#(not ...)))()))) >= (#...)) <= (#(not ...))._())) then
							if ((-(not ...))._() and ((((((#...)._ <= (-(not ...))) < (-...)._) < (-(#(not ...)))) > n._()) <= ((-(not n)) * (...)._()))) then
							end;
							local function n(...)
							end;
							if (((((-(#(not ...)))() > (((((not ...) >= (-...)._) <= (-(#...))) or (...)._)._() * ((not n)() ^ (#...)._()))) < (-...)._) >= (#(not ...))._) == ((#(not ...)) - (-(#...))._)) then
							end;
							local n = (#...)._;
							local function n(...)
							end;
							local n = (not ...);
							local n = (-(not ...));
							while ((((-(#(not {[(#...)._] = (-...)(), [(not ...)] = (-(not n))._(), (not ...)._, [(not ...)._] = (...)._(), [(#(not ...))] = (-(#(not ...)))()})))._ < (not ...)._()) <= (#(not ...))._()) or ((((not ...)._ <= (-(#(not ...)))._) < (not n)()) < ((-(#...))._ ^ (-(#...))))) do
							end;
						end;
						while ((((((#...)._ / (not ...)._) == (#(not ...))._) > (((-...)._() ^ (-...)) + (-...)._)) and ((-...)._() ^ (-(not ...))._())) or ((-(#n)) / (#(not ...))())) do
							for n = ((((#...) > (-(#...))._) < (((not ...)() - (-(#...))()) + (-(#(not ...)))._)) or ((#n) + ((-n)._ / (...)._()))), ((((... - ((-(#...))() * (-(#...))._)) < (#(not ...))._()) < (-...)) and (((-(not n))._ / (-(not ...))._) + (#...))), (((((#...)._() >= (#(not ...))()) and (-(#(not ...)))()) and (not ...)) and (((-...)._() <= ((-(not ...))() * (not ...)._())) < (-...)._)) do
							end;
							for n = (((((-(#(not ...)))() * ...) * (-(not ...))._()) or ((not ...)() and (-(#n)))) or (((-(#...)) * (not n)._()) + (-(#...)))), (((((not {(not ...)._(), (not ...)(), (-(#...))(), (-...)._(), [(-(#(not ...)))] = (#...)})() < (not ...)) == ((-n) % (-(#(not ...)))._)) == (-(#...))._) > ((#(not ...))._() + ((-(#...)) / (-(not ...))._()))), ((((#{[(not ...)] = (not ...)()}) / (#...)._()) < (...)._) > (((-(#...))() / ((-(#...))() ^ ((-(#...))._() ^ (-(#(not n)))))) + (-(#(not ...)))._())) do
							end;
							while ((((...)._() + (-...)()) + ((-(#...))() / (-...)._())) == ((((-...)._ % (#(not ...))._()) * (-(#(not ...)))()) - (not ...)._())) do
							end;
							for n = ((((((-(not {[(-(not ...))._] = (-(#(not ...)))._(), [(-(not ...))] = (-(not n))(), [(-(not ...))._] = (#(not n))._, [(#(not ...))] = (not ...)._(), [(not ...)] = (not ...)._(), (-(#(not ...)))._()}))() <= (-(not ...))._) >= (-(#...))._) > ((#(not ...))._ - (-(#n)))) or ((-(not n))() ^ (...)._())) or (not ...)._()), ((((((-(#(not n))) * (-(#...))._()) + ((-(not ...))() ^ (...)._)) - (-(#n))()) and (-(#...))._) and ((...)._ < (-(#(not ...)))())), ((((not ...)() - (-...)._) + (-(#(not ...)))._) and (((#...) + ((not ...)._() % (-(not ...))._())) == ((not ...)() * (-(not ...))))) do
							end;
							local function n(...)
							end;
							local function n(...)
							end;
							local n = ((((#(-n)._()) / (-(#(not ...)))) or ((-(#...))._() == ((#...)._() ^ (#(not ...))._))) or (#...)());
							for n = (((((((-(#(not ...)))._ / (-(#(not function(...)
								return (-(not ...))._, ..., (not ...)(), (#...), (-(#...))._(), (not ...)._, (-(#...))();
							end)))._()) / (#(not n))()) % (-(#...))._) == (...)()) and ((-...) / (not ...)._)) or (...)()), ((#...)() or (((#(not ...))() and ((-...)._() + ((not ...)._ % ...))) and ((-...)() >= ((#...)._ - (-(not ...))._)))), (((-n)._() and ((#(not ...))._ + (#(not ...))())) and ((((not n)._() - (not ...)._()) + (-(#(not ...)))._()) == ((-...)() % (-...)._()))) do
							end;
						end;
						local function n(...)
							for n = ((((((((-(not ...)) >= (-(#...))()) or ((#(not ...))._() * (-(not n))._))() >= (-(not function(n, n, n, n, n, n, n, n, n, ...)
								return (#(not ...)), (-(#...));
							end))()) > ((#...) + (...)._())) or (-(not ...))._) or (not ...)._) or ((-(#...)) < (#(not ...))._())), ((((((((-(-(#...))()) % (-n)) < (-...)()) or (-(not ...))._)._() == (-n)) < ((not ...)._() + (#...)())) < ((not ...) / ...)) == ((-(#(not ...)))() + (...)())), ((((((not (...)._) % (...)._) + ((#...) / (#...)()))._ > ((#...)() ^ n())) == ((#(not ...))._() + (-(#...))._())) > (((-(#...)) * (-(#...))) * (-(#...))._)) do
							end;
							if ((((((#...) % (-{(...)._(), [(...)._] = ...})._) % (-(not ...))()) == (#(not ...))._) == (not ...)._) and ((-(#...))._() >= ((#...) + (-(#(not ...)))))) then
							end;
							while ((((function(o, o, o, o, o, o, o, o, n, ...)
								return (#(not ...))._, (-n)(), (#...), (...)._, (not ...)(), (-(#n))._(), (...)._();
							end == (-(not ...))) and ((-(#(not ...)))._ == (((-(not ...))._() ^ (#(not ...))._()) % (-(#n))._))) and (not ...)()) and (not ...)) do
							end;
							local function n(...)
							end;
							while ((not ...) and (((((-(#((not ((-(not ...))._() ^ ((#...)._() ^ (-(#...))._()))) and (-(#(not ...)))())))._() + ...) - (-...)) - ((-(not ...))._() / ...)) < ((#...)._() - (#...)._()))) do
							end;
							while (((((((not ...)() % (#(not ...))) > (-...)) >= ((-n)() + (not ...))) > (not n)()) > (not ...)()) <= (-n)()) do
							end;
							if (((...)._ == (((...)() % (-(#...))._) % (#...)._)) and (((#n)() - ((-...)() ^ (-...))) == (not ...)._)) then
							end;
							local n = (-(#(not function(n, n, ...)
								return (-(not ...))._, (-(#...))._();
							end)))._;
						end;
						while (((((not ...)._() >= ((-...) % (-(not {(#...)._(), (#n)._(), (-(#n))._(), [(-...)] = (-...)._(), (-(not ...))._()}))._())) == (-(not ...))._) >= ((...)._() ^ (not ...))) and ((((-...)._ + (not ...)) - (-(#(not ...)))) <= (#...))) do
							local n = ((((...)() < ((#(not ...))._ ^ (-(#(not ...)))())) and ((not ...)._() * (not ...)())) or (-(#(not ...))))();
							while ((((((#...)._() == (-(#...))._) <= (-(#...))()) > (-(#...))._) < (#...)._()) > (((#...)._() % (-(not ...))) % (not ...))) do
							end;
							local n = (-...);
							local n = (-(#function(n, ...)
								return (...)._(), (#(not ...)), (-(#...))._(), (-(#...)), (-(not ...))._(), (-(#...))._, (-(not ...))._();
							end))._;
							local n = (-...)._;
							if ((((not ...) == ((not {[(...)._] = (#n)._, (#...), (#(not ...))(), (not ...)}) * (-...)())) > ((-(#...))() ^ (-(not ...))._)) == (((#(not ...)) % (not ...)()) * (#(not ...)))) then
							end;
							local n = (-(not ...))._();
							local n = (-(#(not ...)))._;
						end;
						local n = (-(not {[((#(not ...))())] = (-(not ...))._, (-{(#(not ...))._, [((-(not ...))._())] = (-(#(not ...)))})._}))._;
						while ((((((-(#...))._ - (((-(#(not ...)))._ ^ (#(not ...))) % (...)._())) < (...)._) <= (-(#...))()) < ((not n)._ - ((-(not ...)) * (not ...)._()))) >= (#...)._) do
							if (((#(not ...))._ > (-(#(not ...)))) and (((-(not ...))._ - ((((-(not ...))._() ^ (#(not ...))) * (...)._) * (#...)._())) >= (-(not ...))._)) then
							end;
							for n = (((((...)._ / (...)._) / ((#...)() ^ (-(#(not ...))))) * ((-...) ^ (...)._())) or ((#(not ...))._ / (-(#(not n))))), ((((((-...)._ % (#(not ...))._()) <= (not ...)._()) < (...)._()) and ((-(not ...))._ / (...)._)) and ((#(not ...))() % (...)())), ((((((-(#(not function(n, n, n, n, n, n, n, n, n, ...)
								return;
							end))) % (-(not ...))()) == ((-(not ...)) ^ (not ...)())) == ((-(not ...))._ + (-...)._())) > (#...)()) >= (-(not ...))()) do
							end;
							for n = ((((not ...)._ - (-(#(not ...)))) + (((#...)() / (#(not ...))()) * (-...)._())) and (((-...)._() % (-...)._()) * (#...)._)), (((not n) and (-...)._()) or ((not ...)._() > (((((#(not ...))._() ^ (-...)()) * (...)._) / (#(not ...))._()) % (-...)._()))), (((-...)._ or ...) or ((-(#(not ...)))._ < ((((-(not ...))._ ^ (-...)) * ((-(not ...))() ^ (...)())) + (#(not ...))._))) do
							end;
							for n = ((((function(n, n, n, n, n, n, ...)
								return (...)(), (-...);
							end)() and (#(not n))) or ((-(#...)) and ((-(#(not ...)))._() <= (-(#...))()))) or ((#...)._() > ((-...)._() / (-(#...))._()))), ((((-(#...))._ >= ((((-(not ...))() * (-(#(not ...)))()) / (...)._()) / (...)._)) and ((-...) / (#...)._)) and (-...)()), ((((-(#...)) % (not n)._()) + ((...)() * (-(#...))())) or ((-(not ...))() <= (((#...)._ % (not ...)._()) - (-(#...))._()))) do
							end;
							local n = (...)._();
							local function n(...)
							end;
							while ((((((-(not ...))._ + (-(#(not ...)))) > ((-(#...))._ / (#...)())) == (#n)._) > ((#(not ...))._() - (-(#(not ...))))) <= (-...)._) do
							end;
							if (((((((#(((not (#(not n))()) and ((-(#...))._ + (...)())) or (-(#(not ...)))._()))() == (...)()) >= ((-(#(not ...)))._() / (#n)._)) < n._()) >= (-(not ...))._()) <= (...)._) and (-(not ...))()) then
							end;
						end;
						local function n(...)
							local n = (-(#(not ...)))();
							local n = (-(not function(n, n, n, n, n, n, n, ...)
								return;
							end))._;
							for n = (((((#(not ...))() / (-(#(not ...)))()) / (not ...)) < (-(#...))._) and ((((-(#(not ...)))._ ^ (#...)._) >= (-(#...))) < (-...))), (((not (-(#...))._) or (((...)._ * (...)()) and (-(not ...))()))() == ((((((not n)._() * (-(#(not ...)))._()) * (... ^ (#(not ...))._)) * (-...)()) - (#(not ...))()) - (-(#...))._())), (((#(not ...))._ and ((((-...)() / (-(#...))) - (-(not ...))) + (-(not ...))._())) and (((-(#(not ...)))() ^ (not ...)._()) + (-(#(not ...)))._)) do
							end;
							local n = (-(not ...))._;
							if (((((-(#...))._ ^ (-(#...))._()) + (#(not ...))._()) >= (#(not ...))) <= (((#(not ...)) % ((-(not ...))._() ^ (-(#(not ...))))) / (#...)._)) then
							end;
							for n = ((((((...)() * (not ...)._) * (-(#...))) * (not ...)._()) / (not ...)._) or (((-(#...))._() > (#...)._) > (-...)._)), ((((-(not ...))() <= (((-(not ...)) * (...)()) % (#(not ...))._)) < (((-(not ...))._() % (#(not ...))()) % (-...)())) < (#...)()), ((-...)._() or ((((-(not ...)) - (-(#n))._()) < ((#((not n) ^ (#(not ...))._())) - (not ...)())) and ((-(not ...)) % (-(#(not ...)))))) do
							end;
							for n = ((((((-(#(not ...))) - (-(#(not ...)))._) and ((-(#(not ...)))._() < (-(#...))._))() * (-(#...))._()) % (-(#...))._) or (((-(#(not ...))) + ((-(not ...))() / (-...)._)) > ((...)._() + (-n)()))), ((((((not ...)._ - (((((#(...)._()) % (-(#(not ...)))) * (-(#(not ...)))._()) == (not n)._())._() * (-(#(not ...)))._())) >= (-(not ...))._()) == ((...)() - (-(#...))._())) > (-(#(not ...)))._) <= (not ...)()), (((((#(not ...)) * (#((not ...) ^ (...)._))) - (-(#...))) > ((...)._ * (-(#...)))) or ((...)._() * (#...)._())) do
							end;
							local function n(...)
							end;
						end;
						local n = (function(n, n, n, n, n, n, n, n, n, ...)
							return;
						end)();
					end;
				end;
			end;
			local r = W;
			local e = Q;
			local d = O;
			local G = L;
			for n = x, F, t do
				if (n >= h) then
					U[(n - h)] = C[(n + t)];
				else
					o[n] = C[(n + t)];
				end;
			end;
			local n = ((F - h) + t);
			local x = u;
			local n, t = nil, nil;
			while true do
				n = s[x];
				t = n[G];
				if (t <= 0x015) then
					if (t <= 0x00A) then
						if (t <= 0x004) then
							if (t <= 1) then
								if (t > 0) then
									o[n[d]] = (o[n[e]] + o[n[r]]);
								elseif (t < 0x001) then
									do
										return;
									end;
								end;
							elseif (t <= 0x002) then
								if (o[n[d]] <= c[n[r]]) then
									x = (x + 0x001);
								else
									x = n[e];
								end;
							elseif (t == 0x003) then
								o[n[d]] = (n[e] ~= 0x000);
							elseif (t <= 4) then
								local x, t = {}, c[n[d]];
								local d = "";
								local o = ((#t) / 0x002);
								for n = 1, o, 1 do
									x[a(f(t, (o + n), (o + n)))] = D[l(a(f(t, n, n)), 0x090)];
								end;
								for n = 1, o, 0x001 do
									d = (d .. x[n]);
								end;
								c[n[e]] = d;
								u = (u + 1);
							end;
						elseif (t <= 7) then
							if (t <= 5) then
								o[n[d]] = (o[n[e]] - c[n[r]]);
							elseif (t == 0x006) then
								local n = n[d];
								o[n](w(o, (n + 1), i));
							elseif (t <= 0x007) then
								if o[n[d]] then
									x = (x + 0x001);
								else
									x = n[e];
								end;
							end;
						elseif (t <= 8) then
							local x, d = {}, c[n[d]];
							local t = "";
							local o = ((#d) / 0x002);
							for n = 1, o, 0x001 do
								x[a(f(d, (o + n), (o + n)))] = D[l(a(f(d, n, n)), 0x090)];
							end;
							for n = 0x001, o, 0x001 do
								t = (t .. x[n]);
							end;
							c[n[e]] = t;
							u = (u + 0x001);
						elseif (t == 0x009) then
							o[n[d]] = o[n[e]];
						elseif (t <= 10) then
							local n = n[d];
							local d, t = T(o[n](o[(n + 1)]));
							i = ((t + n) - 1);
							local t = 0x000;
							for n = n, i do
								t = (t + 0x001);
								o[n] = d[t];
							end;
						end;
					elseif (t <= 15) then
						if (t <= 0x00C) then
							if (t > 11) then
								o = {};
								for n = 0, F do
									if (n < h) then
										o[n] = C[(n + 1)];
									else
										break;
									end;
								end;
							elseif (t < 0x00C) then
								for n = n[d], n[e] do
									o[n] = nil;
								end;
							end;
						elseif (t <= 0x00D) then
							o[n[d]] = c[n[e]];
						elseif (t > 14) then
							o[n[d]] = S(256);
						elseif (t < 0x00F) then
							local n = n[d];
							local d, t = T(o[n](o[(n + 0x001)]));
							i = ((t + n) - 0x001);
							local t = 0x000;
							for n = n, i do
								t = (t + 0x001);
								o[n] = d[t];
							end;
						end;
					elseif (t <= 0x012) then
						if (t <= 16) then
							o[n[d]] = A[n[e]];
						elseif (t > 0x011) then
							do
								return;
							end;
						elseif (t < 0x012) then
							for n = n[d], n[e] do
								o[n] = nil;
							end;
						end;
					elseif (t <= 19) then
						do
							return o[n[d]];
						end;
					elseif (t > 0x014) then
						local a = V[n[e]];
						local l, t = nil, {};
						l = J({}, {__index = function(o, n)
							local n = t[n];
							return n[1][n[2]];
						end, __newindex = function(d, n, o)
							local n = t[n];
							n[0x001][n[2]] = o;
						end});
						for d = 0x001, n[r], 1 do
							x = (x + 0x001);
							local n = s[x];
							if (n[G] == 0x009) then
								t[(d - 0x001)] = {o, n[e]};
							else
								t[(d - 0x001)] = {A, n[e]};
							end;
							E[((#E) + 1)] = t;
						end;
						o[n[d]] = N(a, l, B);
					elseif (t < 0x015) then
						o[n[d]][o[n[e]]] = o[n[r]];
					end;
				elseif (t <= 0x020) then
					if (t <= 26) then
						if (t <= 0x017) then
							if (t > 22) then
								local a = V[n[e]];
								local l, t = nil, {};
								l = J({}, {__index = function(o, n)
									local n = t[n];
									return n[1][n[2]];
								end, __newindex = function(d, n, o)
									local n = t[n];
									n[0x001][n[2]] = o;
								end});
								for d = 1, n[r], 0x001 do
									x = (x + 1);
									local n = s[x];
									if (n[G] == 0x009) then
										t[(d - 0x001)] = {o, n[e]};
									else
										t[(d - 1)] = {A, n[e]};
									end;
									E[((#E) + 0x001)] = t;
								end;
								o[n[d]] = N(a, l, B);
							elseif (t < 0x017) then
								o[n[d]] = (n[e] ~= 0x000);
							end;
						elseif (t <= 0x018) then
							local n = n[d];
							o[n] = o[n](o[(n + 0x001)]);
						elseif (t == 0x019) then
							o[n[d]] = c[n[e]];
						elseif (t <= 0x01A) then
							do
								return o[n[d]];
							end;
						end;
					elseif (t <= 29) then
						if (t <= 27) then
							o[n[d]] = B[c[n[e]]];
						elseif (t > 0x01C) then
							x = n[e];
						elseif (t < 29) then
							o[n[d]][o[n[e]]] = o[n[r]];
						end;
					elseif (t <= 0x01E) then
						o[n[d]] = S(0x100);
					elseif (t == 31) then
						o[n[d]] = B[c[n[e]]];
					elseif (t <= 0x020) then
						local n = n[d];
						o[n] = o[n](o[(n + 0x001)]);
					end;
				elseif (t <= 0x025) then
					if (t <= 0x022) then
						if (t > 33) then
							o = {};
							for n = 0x000, F do
								if (n < h) then
									o[n] = C[(n + 1)];
								else
									break;
								end;
							end;
						elseif (t < 0x022) then
							o[n[d]] = A[n[e]];
						end;
					elseif (t <= 35) then
						o[n[d]] = o[n[e]][o[n[r]]];
					elseif (t == 0x024) then
						local n = n[d];
						o[n](w(o, (n + 1), i));
					elseif (t <= 37) then
						o[n[d]] = o[n[e]][o[n[r]]];
					end;
				elseif (t <= 40) then
					if (t <= 38) then
						if (o[n[d]] <= c[n[r]]) then
							x = (x + 1);
						else
							x = n[e];
						end;
					elseif (t == 39) then
						o[n[d]] = (o[n[e]] - c[n[r]]);
					elseif (t <= 40) then
						x = n[e];
					end;
				elseif (t <= 41) then
					if o[n[d]] then
						x = (x + 1);
					else
						x = n[e];
					end;
				elseif (t == 0x02A) then
					o[n[d]] = (o[n[e]] + o[n[r]]);
				elseif (t <= 43) then
					o[n[d]] = o[n[e]];
				end;
				x = (x + 0x001);
			end;
		end;
	end;
	return N(V(), {}, k())();
end)("1L1G27521W2742751G26G1K27927922F228277122791Y2132111Z27L2152142132122131W1Z2142102122111W2771Q27926H26O26S26M26Q1J1H1L1K1I27H27J27L27N21127P27R27T27V27X27Z1H2791I27927B27D27922828T28U26821B27D1B28U29328U1S1G21I28P29327428P21I1G27C29429B1G21K1G27I2792991G29N1929329N28R2751A29E2941G29Q28P29J28U29N27D1029R29M27921H1G1M27D29N1T29O1G1N29W2942AE2A02A62932A52A22A72752A92AP27529T1G29V29F29329Z29I2AM28U2AO27D2AV29N2A521C29N1J29421J2AU28Q2BF27521C2932BB2752B71G2BI2792AY27D2BD1G2AV2BK2BT2792BO2BV2AV2B62BE2BL294142B22A42B229N2AS2AC2BG2AW29X2C32AC1329X2BV27D1O2CE2952CM27D2BB2AB2942AH28P2AH2BQ27D2CT2B12CW2BP2AF2A12CO1G2CJ2932AV29V2D41G1V2C8279112AA2C12CB152DA1G1P2CM29N2DM29L2C228U1F2BJ2AQ1G21N29K27D2AY29P2DU2752AY1U2CF2BW29321G2DN293", {[0xA5C] = "\116", [801] = "\98", [(-((#{}) + 1711))] = ((#{}) + 1983), [0x1E9] = "\114", [(-679)] = "\97", [((#{0x096}) + 0x440)] = "\116", [((#{((#{347, 910, 0x162}) + 561), 524, 750}) + 5127)] = ((#{692, 901, ((#{229, 0x14E}) + 549)}) + 0x000), [(-((#{}) + 1637))] = 0x189, [382] = "\115", [0x7BF] = "\104", [(-0x48A)] = "\97", [0x305] = "\121", [((#{[0x292] = 0x016, 0x131, 0x295}) + 0xEB1)] = 0x5EE, [((#{38, 121, [106] = 0x27A, 0x10F, [0x0F9] = 0x2DE, 0x0AD}) + 4630)] = ((#{}) + ((#{[328] = ((#{}) + 0x066), 6}) + 0x992)), [(-308)] = "\107", [((#{674}) + 2062)] = "\120", [(-0xF57)] = 0x64E, [(-3499)] = 0x4F8, [(-1465)] = 0x370, [0x63F] = "\116", [0xC41] = 0x321, [((#{0x23C, 344, ((#{0x13E, 483, 612, 717}) + 0x269), [215] = 176, 714}) + ((#{}) + 218))] = "\105", [0x65B] = "\108", [0x0CC] = "\111", [5428] = 1431, [(-((#{0x2B1, 859, [0x34A] = 0x00F, [0x280] = 396, 0x1EA, 0x227}) + 0xB9B))] = ((#{0x123, 0x061}) + 2312), [(-((#{161}) + 0xD70))] = 0x010, [((#{((#{368, 0x282, 0x1FA}) + 385), [530] = 0x0D3, ((#{[236] = 0x1C6, 0x206, 0x09B, 883, 486}) + 251), [601] = 0x355, ((#{[0x166] = 838, [0x0AB] = 0x187, 112, 0x383, 437}) + 0x32E), 0x2DA}) + 1514)] = "\110", [3872] = ((#{0x3AE, [630] = 961, [0x2BF] = 833, 635, [808] = ((#{0x15F}) + 0x0FD), [0x38A] = 0x16C, ((#{0x099}) + 263), [((#{0x31B, 0x364, [0x098] = 0x2A0, 674}) + 559)] = 0x135, 655}) + ((#{}) + 0x552)), [(-0xCF0)] = ((#{18, 610, 0x3CD, 980}) + 0x4D2), [(-0xFB3)] = 0x9AF, [((#{318, 0x049}) + 0x15D8)] = 0x70B, [(-((#{[0x15D] = 0x358, 324, [990] = 0x06B, [0x21B] = 398, 0x1D4}) + 497))] = "\108", [1766] = "\110", [(-0x24A)] = "\112", [(-((#{}) + 0x3C7))] = "\116", [3553] = 497, [((#{[((#{[82] = 484, 391, 259, 175}) + 0x0C5)] = 0x329, 559, 0x007, 951}) + 2732)] = "\115", [(-0x1DE)] = "\107", [((#{0x2F6, 548, 342, 617}) + 0xD8A)] = ((#{0x297}) + ((#{0x12D, 121, 0x257, [616] = 521, 0x363}) + 0x522)), [(-((#{}) + 0x40A))] = "\101", [0x598] = "\116", [(-0xE95)] = 0x3FF, [(-((#{[0x343] = 801, 0x027}) + 894))] = "\114", [(-((#{[250] = 0x3E2, 0x14E}) + 0x8CF))] = 0x192, [(-((#{}) + 1198))] = "\99", [(-0xB04)] = ((#{347, 0x085, 976, 425}) + ((#{960, 0x18E}) + 0x3C1)), [0x79E] = "\97", [((#{327, ((#{265, [940] = 0x205, 0x025, 0x042, 244}) + 0x1D4), ((#{0x221, [0x3D8] = 0x36A, [0x3BA] = 176, 0x312}) + 0x203), 0x2E7}) + 0xD08)] = 489, [((#{[929] = 0x09E, 0x030, 0x098, 355, 425}) + 0x906)] = "\97", [(-((#{0x297, ((#{956, 0x30D, 0x257}) + 500), [665] = 0x1C9, [0x391] = 0x1C5, [0x1FD] = ((#{0x26C, [268] = 0x339, 799, 0x04C}) + 0x003), 0x181, 0x34E}) + 0x4EE))] = "\117", [(-((#{((#{0x3CE, [0x3CD] = 0x2B4, 843, 905, 712}) + 61)}) + 0xB45))] = 2276, [((#{157, 0x09D, 0x2C0}) + 0x129D)] = 2787, [(-((#{820, 0x2D9, 327, 0x3D6}) + 1467))] = 633, [1366] = "\114", [1808] = "\99", [((#{0x16B, 141, [823] = 0x038, 0x062}) + 0x1588)] = ((#{}) + ((#{366, 0x051}) + 0x8FF)), [(-2304)] = 0x1DE, [(-1191)] = "\101", [(-2216)] = 0x74B, [((#{0x1F6}) + 2821)] = "\103", [(-3469)] = 0x54F, [5347] = 820, [3149] = 0x000, [(-((#{0x37A}) + 0x2F9))] = "\108", [((#{[0x152] = 0x30D, ((#{}) + 0x334), ((#{391}) + 370)}) + 3690)] = ((#{}) + 0x80F), [((#{0x01B}) + 5013)] = 256, [((#{0x3B5, 0x338}) + 0x1034)] = 2138, [(-((#{0x347, 78}) + 0xC3A))] = ((#{}) + 0x9EA), [(-162)] = "\108", [((#{[0x121] = 0x0EE, 261, 0x321}) + 4700)] = ((#{0x053, [957] = 121, 0x068, 134}) + 2649), [0x163] = "\101", [(-3676)] = ((#{[869] = 226, ((#{}) + 732), 0x2BF, ((#{}) + 967), [113] = ((#{321, 0x008}) + 0x21C), 287}) + 0x7FB), [(-913)] = "\116", [(-3790)] = 1364, [((#{}) + 2354)] = "\116", [(-((#{0x113, 0x356, 0x218}) + 0x951))] = 81, [1319] = "\116", [4124] = 679, [((#{}) + 0x4DF)] = "\117", [((#{0x326}) + 0xC54)] = 1163, [4182] = 0x2FA, [4526] = ((#{}) + 1191), [(-2546)] = ((#{76, 0x10E, 0x19F, 550}) + ((#{95, ((#{0x18E, 210, [0x2D6] = 69, 0x12A, 909}) + 0x2F7)}) + 96)), [0x051] = "\101", [(-0x834)] = ((#{0x0FC, 0x2A3, ((#{[0x1B7] = 0x2FD, 0x10B}) + 232)}) + 1763), [(-((#{}) + ((#{0x12F}) + 0x6E1)))] = ((#{((#{542, 0x33A}) + 0x21A)}) + 0x249), [(-0x54F)] = "\35", [4389] = 0x407, [((#{67, 956, 0x31B}) + ((#{0x1C0, 0x0D8}) + 2133))] = "\98", [(-0x6EE)] = ((#{0x013, ((#{((#{0x1CB}) + 375)}) + 729), 89}) + 0x595), [0x14B0] = ((#{[0x1A3] = 420, 823, 0x200, 866}) + 0x729), [(-1795)] = ((#{[991] = 0x0C8, 0x3E7}) + ((#{0x359, 0x340, 0x20C}) + 200)), [0x89A] = "\114", [((#{650, 0x1FA, 0x0F0, 498}) + 2272)] = "\98", [((#{[0x017] = 369, 0x21C, 999, [695] = 0x341, ((#{}) + 0x17A), 0x37C}) + 0xF5B)] = ((#{649, [800] = ((#{[800] = 382, 880, 0x2F4, 123}) + 0x391), ((#{566, 61, 315, [0x092] = 954, [984] = 0x2A3, 0x049}) + 0x05F), 178, 0x175}) + 0x130), [((#{[0x0FB] = ((#{[0x0E6] = 35, 0x37F, [0x111] = 0x3A0, [918] = 0x043, 746}) + 163), 0x36C}) + 0xFEF)] = 12, [((#{((#{}) + 486)}) + 4931)] = ((#{[0x1C1] = 44, 0x215, 0x098, 869, 0x032}) + 2888), [0xAE3] = "\116", [(-0x87E)] = 1808, [(-((#{}) + ((#{[764] = 0x0B0, 925}) + 0x406)))] = "\97", [(-((#{642}) + ((#{0x108, [825] = 0x0D0, 788, 508, 96}) + 1966)))] = 0x0DE, [(-((#{[0x200] = 243, 0x3B6, 286}) + 0xCD6))] = ((#{0x2A0}) + 2734), [(-2619)] = 2202, [((#{0x0EB, 0x2A4}) + 3625)] = ((#{((#{558, 379, 0x0D9}) + 0x125), 692, [263] = 179, ((#{0x33D, 0x28C, 910, [910] = 0x0C3, 0x0B9}) - 0x004)}) + 0x7D2), [((#{0x1C2}) + 4400)] = ((#{862}) + 1136), [((#{131, 332, 0x064, 0x289}) + 5181)] = ((#{458, [726] = 0x1EB, 0x1A4, 424}) + 0xFFFD), [(-3585)] = 0x015, [(-((#{}) + 2698))] = ((#{}) + 0x357), [(-0xA78)] = ((#{}) + 2264), [((#{635}) + 0x188)] = "\119", [((#{834, ((#{0x20D, 333}) + 0x3BF), 391}) + 0xED7)] = ((#{221, ((#{0x321, 0x153, 0x332, 124}) + 0x212), 932}) + 1724), [(-0x357)] = "\105", [((#{}) + 0x10A8)] = ((#{0x054}) + ((#{0x17C, 815, ((#{}) + 418)}) + 829)), [(-0x617)] = ((#{599, 0x27E, 271}) + 0x235), [((#{[0x242] = 663, 0x2C7, 0x364}) + 3383)] = ((#{441}) + 381), [725] = "\104", [4556] = 1198, [((#{}) + 2264)] = "\101", [((#{624}) + 0xCEB)] = ((#{((#{0x14A}) + 382), ((#{0x10A}) + 0x215), 330, ((#{[0x11E] = 0x152, 0x0FF, 0x299, [545] = 0x0E1, 0x1EE, 120}) + 0x2CC)}) + 769), [((#{0x3B9, 361, ((#{0x112}) + 377), [((#{0x0E4, [153] = 0x38A, 0x1B6}) + 957)] = 0x0C6, 827}) + 2989)] = ((#{}) + 981), [(-0x0DE)] = "\101", [1628] = "\101", [(-((#{[163] = 0x3C8, 37}) + 1237))] = "\114", [((#{}) + 880)] = "\98", [0x279] = "\97", [0x12EC] = ((#{[((#{[189] = 911, 839}) + 406)] = 937, 0x214, [0x21F] = 680, 0x097}) + 2820), [((#{}) + 4501)] = 1162, [((#{0x134, 0x22D, 0x31D}) + 0x1437)] = ((#{0x19F}) + 16777215), [(-12)] = "\101", [(-402)] = "\108", [265] = "\97", [(-((#{}) + 0x743))] = 0x65C, [((#{885, 113, 0x0F1}) + ((#{0x078, 697, 0x203, 0x082}) + 4416))] = ((#{((#{692, 703, 953}) + 0x216), 0x0CF, 246}) + 2351), [((#{0x27E, 0x116}) + 3249)] = 725, [((#{}) + 0x993)] = "\114", [(-((#{18, 0x3DB}) + 1590))] = ((#{((#{}) + 333), 664, ((#{0x3B4}) + 0x30D), 854}) + 0x4DB), [981] = "\116", [993] = "\51", [1395] = "\115", [(-((#{[865] = 262, 0x1A7, 629, [0x13E] = 395, 0x22D}) + 2309))] = ((#{40, 552, ((#{[0x1B5] = 0x0A4, 484, 0x208, 776}) + 649), [0x119] = ((#{0x2DF, 635}) + 775), 618}) + 116), [(-102)] = "\101", [(-((#{0x398}) + 2085))] = 0x573, [(-1953)] = 0x0A2, [(-0x341)] = "\101", [(-2963)] = ((#{[22] = 874, ((#{[0x1F5] = 791, [283] = 351, 0x10F, 812}) + 995)}) + 0x46B), [120] = "\115", [((#{}) + ((#{481}) + 1866))] = "\98", [((#{878}) + 2626)] = "\97", [((#{0x3D9, 0x134, 906, 158}) + 0x147C)] = 0x020, [0xBCC] = 993, [2892] = "\115", [(-0x7D6)] = ((#{[((#{[532] = 0x06A, 0x1CD, ((#{0x305, 0x1E9}) + 0x0D0), 250}) + ((#{948}) + 260))] = 0x32B, 0x3E3, 0x05F, [812] = 0x361, 0x040, 797}) + ((#{}) + 0x105)), [(-0xC9D)] = 2627, [(-((#{0x208, 225, 0x3AF}) + 3050))] = 2421, [((#{[0x149] = 572, 903, [44] = 558, 595}) + 0x6BD)] = "\99", [(-0xB86)] = ((#{0x354, 45, 565, 0x363}) + 0x406), [((#{((#{909, 99}) + 66), [445] = 0x398, 0x0B7, 0x0AA, ((#{0x17D, 0x094}) + 975)}) + ((#{[0x026] = 0x3DB, 0x27F, 0x3DD}) + 4009))] = ((#{((#{}) + 0x094), 822}) + 1948), [3044] = 0x40E, [(-((#{[((#{0x300, 345, [0x050] = 0x36D, 637, 442}) + 0x0B9)] = 536, [0x15C] = 0x260, 102}) + 2440))] = ((#{786, 493}) + 0x63D), [((#{74, 389, 0x122}) + 5616)] = ((#{0x0A5}) + ((#{}) + ((#{[917] = 0x26B, 0x087}) + 0x272))), [3336] = ((#{}) + ((#{}) + 1089)), [(-1715)] = 0x1F3, [4334] = 895, [(-0xF18)] = ((#{[235] = ((#{((#{0x116, 0x08F}) + 966), 0x067, 0x100, 0x262}) + 846), 0x1D9}) + 420), [(-0x9C3)] = 0x65B, [(-2775)] = ((#{293}) + 912), [((#{641, [311] = 383, 705, 0x0BF, 0x025}) + 0x234)] = "\115", [(-0xA82)] = ((#{}) + 840), [0x13A9] = 0x024, [(-((#{0x24E, ((#{[431] = 0x1E4, 0x325, 559, 0x0E9, 0x2B9}) + 844), ((#{}) + 297), 0x27F}) + 1128))] = "\111", [((#{0x005}) + 0x7D4)] = "\101", [(-((#{201, 197}) + 1135))] = "\99", [0xB8B] = ((#{0x0DC, 612, 847, [0x345] = 0x3BE, 0x154}) - 3), [((#{985, 0x029, 45}) + 2535)] = "\101", [((#{0x138, 717, 296}) + 2418)] = "\98", [0x1433] = 4, [(-0xD18)] = ((#{}) + 0x4F2), [0x48B] = "\99", [(-((#{994, ((#{0x39D, [0x095] = 683, 0x28C, 340, 0x2D1}) + 0x2C3), 0x36E, 353}) + ((#{0x204, 183, [0x15F] = 238, [0x329] = 0x0B5, [0x3AA] = 0x126, 415}) + 1690)))] = ((#{178, ((#{677}) + ((#{}) + 0x327)), 0x00E, 825}) + 351), [(-0x1F1)] = "\97", [(-0x348)] = "\101", [(-0x58C)] = 2, [((#{[326] = 347, 0x361, [0x160] = 724, 0x027, 0x04F, 438}) + 0x40A)] = "\50"}, function(...)
	if (not true) then
		local function n(...)
			local function n(...)
				for n = (((((-(#(not ...)))._() < ((n + (((-(#...))._ ^ (#(not ...))()) % (-...)())) + (#(not ...))())) < (#n)._) == ((...)._() ^ (#...)._())) or (-(not ...))._()), ((((-(#(not ...)))._ == (#(-(#(not ...)))())) and (((-...)._ == (not ...)()) >= (((-(#n)) * (-(#(not ...)))()) + ((-(not ...)) % ((-(#(not ...)))._ ^ (...)._()))))) or (((((-(not ...))._() / (...)._()) * (...)._) > ((-(not ...))() + (-(not ...)))) > ...)), (((((((#...)._ / ({[(not ...)] = (-...)(), [(#...)] = (#...)._(), [((#...)())] = (-(not ...))._(), [(...)] = (#(not ...))._, [(-...)._] = (#...)}._ ^ (not ...))) * (#...)._) > ((#(not ...)) % ...)) >= (#(not ...))) == (#(not ...))._) >= ((-...)._ + (-(not ...))())) do
					if ((((((#function(n, n, n, n, ...)
						return (-(#...)), (-...)(), (#...)._(), (-(not ...));
					end)() * (-(#n))._()) >= (((-(#(not ...))) * (-(#(not ...)))()) % (#...)._())) > (-(#...))._()) > (-(#...))) > (#(not ...))) then
					end;
					for n = ((((((-(#(not ...)))._() <= (-(#...))._()) and (not ...)._) or (((-...) / (#...)()) == (#(not ...))())) or (-(#...))) or (#...)._()), (((((-...) - (((#(... ^ (...)._)) / (...)()) / (-(#...))())) <= (not ...)) > (-...)) >= (not ...)._()), ((((#((-(not ...))() ^ (#(not ...))())) + (#...)._) > ((...)() - (-(#(not n)))._)) or ((((...)._() >= ((-n)._() - (-(#n))._())) > ((...)._ - (-(#...)))) > (#(not ...))())) do
					end;
					local function n(...)
					end;
					local n = (not function(o, o, o, o, o, o, n, ...)
						return (-(#...))._, (...)._(), (#(not n))._, (not ...), (...)(), (-(#...))(), (-(#(not ...)))._, (#n), (-(#(not ...)))._;
					end);
					local function n(...)
					end;
					if ((#n)() or ((...)._ and ((((((-(#(not ...)))() / (-(#...))) == (not ...)._()) >= (-(#(not ...)))) == (-(#(not n)))) == (-...)._()))) then
					end;
					local function n(...)
					end;
				end;
				for n = (((((not n)._ < (#...)._()) or ((#(-(#(not ...)))) <= ((-(#...))._ * (-(not ...))._))) or ((((-(not ...))() + n._()) <= ((#(not ...))._() ^ (-...)._)) < (not ...)._())) or (((-(not ...))._ / (#(not ...))()) * (-(#(not ...)))._())), ((((-(#(not ...))) == (...)()) < (not ...)) or (((-(((not (-(#...))()) > ((-...)._() ^ (-(#(not ...)))._())) < (#n)._))() - (-(#(not ...)))._()) and ((((-...)._() % (-...)._) == ((#...)._ % (#...)._())) >= (#...)))), ((not ...)._ and (((#...)._ > ((-...)() * ((-(#(not ...)))() ^ (#...)()))) > ((#...)._ + ((((#(not ...))._ ^ (...)._()) % (#...)) % (-...)._)))) do
					local o = (-(((not (not ...)()) == ((#...) / (-(not ...))._())) and (((#...) > (-(#...))) == (not ...)())))._;
					if (((-(#(not function(o, o, n, ...)
						return (-(#...))._, (...)._(), (...)._(), (not n)._, (not ...)._(), (...)(), (-...)._();
					end)))._() ^ (#function(n, n, n, n, ...)
						return (...)(), (#...)(), (-(not ...)), (-...)(), (-(#...)), (-...), (#(not ...)), (-(#(not ...)))(), (-(not ...));
					end)) and ((...)._() <= (((not ...)() / (#...)) - (((-(not o))._ ^ ...) / (-(#(not ...)))._)))) then
					end;
					local function n(...)
					end;
					while (((#...) == (-(#(not ...)))()) and (((((-(#...))._ % ((-...)._ ^ (#...))) * (#(not ...))()) % (-(#(not ...)))()) <= (-(#...))._())) do
					end;
					while ((((not function(n, n, n, n, n, n, n, n, n, ...)
						return (-(not ...))(), (not ...)(), (-(#...))._, (-(#...))._, (...)(), (#(not ...))._(), (...)._();
					end) >= ((((not ...)() / (...)._) - (-(#...))()) + (-(#...)))) < ((-(#(not ...)))() - (#(not ...))._())) and (-...)._) do
					end;
					while (((((-(#(not n))) >= function(o, o, o, o, o, n, ...)
						return (-(#(not n)))._, (-(not ...))._();
					end) <= (-(#...))._) == (-(#(not ...)))()) < (((-...) % ((...)._() ^ (-(not ...))._())) + (-(not ...)))) do
					end;
					for n = ((((#(not n))._ / (#n)) and ((not ...)() > ((not n)() * (-(#...))._))) and (((-(#(not n)))() > (-...)) <= (...)())), (((((-(#...))() % (not ...)._) < (not ...)()) > (not ...)) or ((-...)._() <= ((-(not ...)) + ((#(not ...))._() % (not ...))))), (((((not n)() % (-(#(not ...)))) * (-(#...))._) and (#(not ...))) or (((((-(#(not ...))) >= (-(not ...))._()) >= (-(#...))._()) > ((#...)() ^ (not ...)())) >= ((...)._() - (#(not ...))))) do
					end;
					local n = (-(#...));
				end;
				for n = ((((not ...)._ and ((-(not ...)) > (((-(not ...)) + (-(#(((not (-(#...))()) > (-(not ...))._) > ((-(#...))._() - (#(not ...))))))._()) - (#n)._))) and (((-(#...))._ % (...)._()) > (not ...)())) and ((-...)._ % (#(not ...)))), (((((-(#(not {(not ...)._, (not ...), [((-(not ...))._())] = (#...)(), (-(#(not ...)))})))._() + ((-(not function(n, n, n, n, n, n, n, ...)
					return (-(not ...)), (#...)();
				end))() / ((#((not (-...)()) or (((not ...) / (-(#(not ...)))()) > (...)())))._ ^ (not ...)._))) >= (-(not ...))._) == ((-(#(not ...)))._ / (#(not ...))())) and ((...)._() == ((-(not n))._ - (-(not n))._()))), ((((((not (#...)._()) + ((-(#...)) ^ (-(not ...))._())) or (-...)) or ((...)() / (#...)()))._() + (-(#...))._()) or ((((((not (#(not ...))()) <= ((#(not ...))._() / (#...)._)) and (-(#...))._())._() <= ({} % ((...)._ ^ (-...)()))) > (#(not ...))._()) < (((-...)() / (#(not ...))) * (-...)()))) do
					while (((-(not ...))._() and (((n() / (...)._()) < (...)._()) > (...)._)) or ((-(not ...))() == ((-(#...))() % (-(not n))._))) do
					end;
					while (((((#...)._ < (-(#...))._()) > (-(#...))._) >= (not ...)()) <= ((((not ...) % (...)._()) % (...)._()) / (...)())) do
					end;
					if ((((#...)() < (-...)()) > (((#(not ...))._() % (-...)._) * (-(#(not ...)))._())) == ((not ...) * ((...)._() ^ (-(#(not ...)))()))) then
					end;
					local n = (not ...)._;
					local function n(...)
					end;
					if (((((-(not ...))() <= ((-...)() % (#(not n)))) < ((-...)._() % (-(#(not ...)))._)) <= (-...)) > (... * (-(not ...)))) then
					end;
					for n = (((#...) < (#(not ...))._) or ((((-...)._() ^ (-...)._()) - ...) and (((#(not ...))() <= (not n)) < (-(#...))._))), (((((not ...) <= (-(#n))._()) <= ((not ...)._() + (-(not ...))._())) > (((-(#(not ...)))._ / (-(#...))._) * (#...)._)) and (...)._()), ((n > ((-(not ...))() ^ (-(#(not ...)))._)) <= (((((-(not ...)) / (#(not ...))._) * (not ...)()) / (...)()) + (-...)._)) do
					end;
					while (((-(#(not ...))) == ((#(not ...))._() ^ (-(#...))._())) and (((((-(not ...)) % (-...)._()) % (#...)._()) >= (...)._) > (-...)())) do
					end;
				end;
				for n = (((((((#(not ...))._ < (#...)()) > function(n, n, n, n, ...)
					return (-...), (#...), (-(#...))(), (not ...)._();
				end) > (-(not ...))) > (-(not ...))) or ((((#...)() + (-...)._) >= (#...)._) > (-...)._())) or (-(#...))._()), (((-(#(not n)))() >= ((not function(o, o, o, o, o, o, o, n, ...)
					return (-(not ...))._(), (not ...)._(), (...)._(), (-(#...))(), ..., (-(not ...)), n();
				end)() - (-(#(not {[((-(not ...))())] = (-(not ...))()})))._())) and (((((((-(not ...)) ^ (#(not ...))()) / (#(not ...))) / (-...)) == (#(not ...))._()) < (-...)()) > (-n)._())), (((((-(#(((((not (-(#...))) == ...) < (-...)._) >= (...)()) < ((#...)._() - (-(#(not ...)))())))) / (-(#(not n)))) > (not ...)) or (((-(#(not ...)))._() == ((not ...)() ^ (#...)())) and (-(#(not ...)))())) or (((-...) * (#...)._()) > (-(#(not ...))))) do
					local n = (#n)();
					local function n(...)
					end;
					local n = (-(#(not {[(-(#...))] = (#...)()})))();
					local function n(...)
					end;
					if ((((#(not ...))._() * (... ^ (#(not ...))())) > ((-...) / (not n)._())) and (((-(#...))._() * (-(#...))._()) - (#(not ...)))) then
					end;
					local function n(...)
					end;
					while (((((-(not {[((-(not ...))._())] = (-(#(not ...))), (#(not n))._}))._ % function(n, n, n, ...)
						return;
					end) * (-(#...))()) <= ((-...) * (not ...)())) and (((-(#...))() <= (-(#...))()) <= (-(#(not ...)))._)) do
					end;
					local n = (#...)._();
				end;
				while ((((-(#(not ...)))._() or (#(not ...))._()) or ((-n) * (#(not ...))._())) or (((((...)._ == (-(#(not ...)))()) < (#...)._()) >= ((-(#(not ...)))._() ^ (#n))) == (#...)._)) do
					for n = ((((-(not ...))._() <= ((-(not {(#(not n))(), (#(not ...))._, (...)._(), [((#(not ...))._())] = (-...)._})) - (((#...)._ / (-...)) / (-(#(not ...)))()))) <= ((#...)._() + (-(#...)))) > (#...)()), ((((#(not ...))() < ((#(not ...))._() * (#(not ...))._)) or (-(#...))._()) or (((-(#(not ...))) - (not ...)()) <= ((#(not ...))._() - (-(#(not ...)))()))), ((((-(#(not ...)))._ % (-(#function(o, n, ...)
						return (...)._(), (-...)._, (-(#(not ...)))(), (#(not ...)), (-(#(not n)))._, (-(#...))(), (#(not ...)), (-...), (-(#(not ...)))();
					end))._()) < (...)()) or ((((-...)._() / (-...)._) and ((#...)() < (#(not ...)))) and (#(not ...))._())) do
					end;
					for n = (((((-(#(not n)))._() + (not {[((-(#(not ...)))._())] = (-...), [(#...)] = (...)._, (#...)(), (-(#(not n)))._(), [((...)())] = (-(#(not ...)))._(), [((-(#...))())] = (-(#(not ...)))._()})()) <= ((-(#...))._ - ...)) < (#((not ...) ^ ((#...)() ^ (...)._())))) < (-(not ...))()), (((-(#(not ...))) < ((((((#(not n)._()) or (((#(not n))._ ^ (-...)._) - (-(not ...))))._ ^ (-(not n))._) / (-(not ...))._) / (-(#...))._()) / (-(not n))())) and ((-(#...))._ >= (-(not ...)))), (((((...)() == ...) and ((-...) >= (-(#...)))) and (-(#...))._) and (((...)() >= (-(not ...))._()) >= (-(#(not ...)))._())) do
					end;
					local function n(...)
					end;
					local function n(...)
					end;
					if (((((#(not ...))._ + (-(#function(n, n, n, n, ...)
						return;
					end))()) <= ((#...)._ % (-(not ...))._)) >= (#...)) <= (((-(not ...))() % (#...)()) - (not ...)._)) then
					end;
					for n = (((-(#((not ((-(#(not ...)))() ^ (-(not ...))._)) + ((#(not ...))._ * (-(#...))._())))) / (#...)._) or ((-...)() and (((((-(#...)) < (-(not ...))()) >= (-(#...))._()) > (-(#(not ...)))._()) <= (-(#...))))), (((((-(not ...))._() >= ((-{(not n)._, (-(#...))._()})() + (not ...))) and ((-(not ...))._() - (#(not ...))._())) and ((#...)._ * (...)._())) and (#n)._), (((((-(#...))._() > (not ...)) < (-(not ...))._()) == (((... * (...)()) / (#...)._()) - (not ...)._)) < (#(not n))._()) do
					end;
					if (((((((not ...)._() / (-...)) / (not ...)._()) == (-(#...))) < (-(#(not ...)))._) >= (-(#(not ...)))._()) and ((#...)._() <= (-(not ...))._)) then
					end;
					for n = (((#(not ...)) < (((((-(#(not function(o, o, n, ...)
						return (-(#...))._(), (#(not ...)), (-n)._(), (-(#(not ...)))._, (not ...), (-...), (#...)(), (-(not ...))();
					end)))._ ^ (#...)) / (#...)._()) / (#(not ...))()) + ((#...)._() % (-(not ...))._))) and (not ...)._), (((((-(#(not ...)))() * (-(#(not function(...)
						return (-(#n)), (-(#(not ...))), (#(not ...)), (#...)._, (#(not ...)), (-(#...)), (#(not ...))._;
					end)))()) + (#...)()) <= (-...)._()) and (((#...)() == ((-(#...)) * (#...)._())) >= (...)._)), ((((#...)._() == (((-(#...))._ / (not ...)) / (...)._)) >= (... ^ (not ...)._())) and ((-(not ...)) <= (not ...)._)) do
					end;
				end;
				while (((#(not ...))._() - (-(#...))._()) and ((((-...)._() < (((-(#...)._) > ((...)._() + (n / (-(#...))._))) + ((#...) * (-(#...))._))) == (-...)._) == ((-(#(not ...)))._() % ((-(not ...))() ^ (-(#(not ...))))))) do
					local n = (-(#(not n)))._();
					if (((((-(not ...))() < (#(not ...))()) == ((-...)._() * (-(#...))())) >= (((-(#(not ...)))._ / (-...)._()) * (-(#(not ...)))())) == (-(not ...))._()) then
					end;
					local n = (-n);
					for n = ((((not n)() ^ (#(not {[(-(not ...))._] = (-(#(not ...))), [((#...)._())] = (...)()}))) or (((#(not ...))._() + (-n)) and (-(#(not ...))))) or (((-(not ...))._ ^ (#...)._) - (#(not ...))._)), ((((#...)._ == (not ...)._()) >= ((((#(not ...)) - ((not ...) ^ (#(not ...))._())) - (#(not ...))) + (#(not ...)))) and (...)()), ((((not ...)._() + ((((-(#(not n))) * (...)()) * (#(not ...))()) * (-...)())) - (not ...)()) and ((#(not ...)) == (#(not ...))())) do
					end;
					if (((((((-(#(-(#(not ...)))._)) or (((not ...)() >= (-...)._) and (#...)._))._() / (-(not ...))._) - ((...)() ^ (-(#(not ...))))) - ((-(#(not ...)))() * (-...)())) + ...) < (-(#...))._()) then
					end;
					while (((-...)() and ((((((-(not ...))._() / (-(#(not ...)))) * (-...)._()) * (#...)()) / (-(not ...))()) + (#...)._)) or (-...)()) do
					end;
					while ((((((not ...) + ((#(#(not n))()) <= ((#(not ...))() - ((-(not ...))._() ^ (#(not ...))._())))._) == (-(#...))._) < (((-...)._ % (-(#(not ...)))()) * (-(not ...))())) == (...)()) and (-...)()) do
					end;
					if ((((-(not ...))._() >= (-(#...))) or ((-(#n)) % ((...)() ^ (-(#(not ...)))._))) or (((-n)._() - (-(#(not ...)))) and (-(#(not ...)))._)) then
					end;
				end;
				local n = (not ...)._();
				if (((((((-(not ...)) <= (not {(not ...)._()})._()) <= (-function(n, n, n, n, ...)
					return (#(not ...))(), (#...)(), (not ...)._(), (#(not ...))(), (#...);
				end)._) <= ((#...)._ - (#(not ...))())) <= ((not ...)._ + (-...)._)) and ((-(#n))() <= (-...)._)) and n._) then
					for n = (((((...)() <= (#n)._()) < ((-(not ...))() ^ (-(#(not ...)))())) >= ((not ...)() + (... % (-(#...))))) >= (-(#...))), ((((((-(not ...))() > {(-...)._, (-(#...))._()}._()) == ((-(not ...))._ % (-(#...))._)) < ...) and ((...)._ > (-...))) and (#...)()), (((((#(not ...))() <= (-n)()) > ((((-(#(not ...)))._ ^ (-(#(not ...)))) / (not ...)()) % (not ...)._())) or (-(not ...))()) or (-...)._) do
					end;
					for n = ((((not ...)._ ^ (-(not n))._) + (not ...)._()) or ((...)._ == ((((#...)._() / (...)._()) * (#...)) * (-(#(not ...)))))), ((#...)._() or (((((#(not function(n, n, n, ...)
						return (-(#...))._, (-(not ...))();
					end))._() ^ (-...)()) / (-(not ...))._()) <= (((-...)._ * (...)._()) - (-(#(not ...))))) and (...)())), ((((#...)._() - (not function(o, n, ...)
						return (-(#(not ...)))._(), (not n)._, (-(not ...))._, (-(#...))._, (#...), (-...)._, (not ...)._(), (-(not ...));
					end)._()) or (...)._()) or (((-(#(not ...))) > (((#(not ...))._() % (#...)._) + (not ...)())) > (-(#(not ...)))._)) do
					end;
					for n = ((((((not ((-(#(not ...)))() ^ (not ...)())) - (#...)) < (-(not ...)))._ ^ (#n)()) <= ((-(#...))._() - (((-(not ...))() ^ (#(not ...))()) % (-...)()))) and ((not ...)() * (-(#n))._())), (((-(#(not ...)))._() and ((-(#function(o, o, o, o, o, n, ...)
						return (-(not n))(), (-(not ...))(), (#(not ...))(), (-(#(not ...)))._(), (#(not ...))._(), (-(#(not ...)))._(), (-...);
					end)) < ((#...)._ + (-(#(not ...)))()))) or ((#(not ...))._() > ((-(#(not ...)))() % ((not ...)() ^ (-(#...))._)))), ((((-(#{(#(not ...))._})) <= ((-n)._ % ((-...)() ^ (-...)))) >= (((-(not ...)) / (-...)._) + (#(not n))._())) == (-(#(not ...)))._) do
					end;
					local n = (-(#(not ...)))();
					local n = {[((-...)())] = (#(not ...))._(), (-(#(not ...)))._(), [((not ...)._())] = (-(#(not ...)))._(), (#...)(), [(not ...)._] = (-(#(not ...)))._, (#(not ...))._, [((#...)._())] = (not ...)._()};
					local n = (-(#...));
					if ((((not {[((...)._())] = ..., [(#...)] = (not ...), (-(#...))._, (#(not ...))()})._ + (#...)._) <= ((((#(not ...)) / (#(not ...))._) - (-(#(not ...)))._()) + (-(#(not ...)))._)) and ((#(not n))._ < (#(not ...)))) then
					end;
					if ((((-(#((not (-(#(not ...)))._()) >= (((not ...)._ ^ (#...)._) / ...))))() > (((((#(not ...))() / (#(not ...))()) * (#(not ...))()) + (-(#...))()) - (-(#(not ...))))) <= (#...)._()) or (-(not ...))._) then
					end;
				end;
				local n = (-(not ...));
			end;
		end;
	end;
end);
